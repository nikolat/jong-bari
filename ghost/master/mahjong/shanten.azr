//haiはソートされてる前提
int getShanten(array hai)
{
	int shanten = _saorirequest("MahjongUtil", "shanten", _arystr(hai))["Result"];
	return shanten;
}

int getMin(array a)
{
	int r = 99;
	for (int i = 0; a[i] != nil; i++)
	{
		if (a[i] < r)
			r = a[i];
	}
	return r;
}

int getShantenNormal(array hai)
{
	array a = getShantenNormalWithMentsu(hai);
	int r = a[0];
	return r;
}

array getShantenNormalWithMentsu(array hai)
{
	//孤立牌の除去
	hai = removeKoritsuHai(hai);
	//雀頭候補
	array arAtamaKouho = getToitsu(hai);
	string atama;
	int shanten = 99;
	array arMentsu;
	array arMentsuKouho;
	for (int i = 0; arAtamaKouho[i] != nil; i++)
	{
		array haiWithoutAtama = removeElementByName(hai, arAtamaKouho[i], 2);
		array a = getSupai(haiWithoutAtama);
		array man = a[0];
		array pin = a[1];
		array sou = a[2];
		array jihai = a[3];
		array arKouhoMan = getMentsu(man);
		array arKouhoPin = getMentsu(pin);
		array arKouhoSou = getMentsu(sou);
		array arKouhojihai = getMentsuJihai(jihai);
		array arKouhoAman = arKouhoMan[0];
		array arKouhoApin = arKouhoPin[0];
		array arKouhoAsou = arKouhoSou[0];
		array arKouhoBman = arKouhoMan[1];
		array arKouhoBpin = arKouhoPin[1];
		array arKouhoBsou = arKouhoSou[1];
		//Patern A
		int nMentsuA = arKouhoAman[0] + arKouhoApin[0] + arKouhoAsou[0] + arKouhojihai[0];
		int nMentsuKouhoA = arKouhoAman[1] + arKouhoApin[1] + arKouhoAsou[1] + arKouhojihai[1];
		if (nMentsuA + nMentsuKouhoA > 4)
			nMentsuKouhoA = 4 - nMentsuA;
		int shantenKouhoA = 8 - (2 * nMentsuA) - nMentsuKouhoA - 1;
		//Patern B
		int nMentsuB = arKouhoBman[0] + arKouhoBpin[0] + arKouhoBsou[0] + arKouhojihai[0];
		int nMentsuKouhoB = arKouhoBman[1] + arKouhoBpin[1] + arKouhoBsou[1] + arKouhojihai[1];
		if (nMentsuB + nMentsuKouhoB > 4)
			nMentsuKouhoB = 4 - nMentsuB;
		int shantenKouhoB = 8 - (2 * nMentsuB) - nMentsuKouhoB - 1;
		//より小さい方を選択
		if (shantenKouhoA < shanten)
		{
			shanten = shantenKouhoA;
			atama = arAtamaKouho[i];
			arMentsu = makeMenstu(arKouhoAman[2], arKouhoApin[2], arKouhoAsou[2], arKouhojihai[2]);
			arMentsuKouho = makeMenstu(arKouhoAman[3], arKouhoApin[3], arKouhoAsou[3], arKouhojihai[3]);
		}
		if (shantenKouhoB < shanten)
		{
			shanten = shantenKouhoB;
			atama = arAtamaKouho[i];
			arMentsu = makeMenstu(arKouhoBman[2], arKouhoBpin[2], arKouhoBsou[2], arKouhojihai[2]);
			arMentsuKouho = makeMenstu(arKouhoBman[3], arKouhoBpin[3], arKouhoBsou[3], arKouhojihai[3]);
		}
	}
	//雀頭無しの場合
	array a = getSupai(hai);
	array man = a[0];
	array pin = a[1];
	array sou = a[2];
	array jihai = a[3];
	array arKouhoMan = getMentsu(man);
	array arKouhoPin = getMentsu(pin);
	array arKouhoSou = getMentsu(sou);
	array arKouhojihai = getMentsuJihai(jihai);
	array arKouhoAman = arKouhoMan[0];
	array arKouhoApin = arKouhoPin[0];
	array arKouhoAsou = arKouhoSou[0];
	array arKouhoBman = arKouhoMan[1];
	array arKouhoBpin = arKouhoPin[1];
	array arKouhoBsou = arKouhoSou[1];
	//Patern A
	int nMentsuA = arKouhoAman[0] + arKouhoApin[0] + arKouhoAsou[0] + arKouhojihai[0];
	int nMentsuKouhoA = arKouhoAman[1] + arKouhoApin[1] + arKouhoAsou[1] + arKouhojihai[1];
	if (nMentsuA + nMentsuKouhoA > 4)
		nMentsuKouhoA = 4 - nMentsuA;
	int shantenKouhoA = 8 - (2 * nMentsuA) - nMentsuKouhoA;
	//Patern B
	int nMentsuB = arKouhoBman[0] + arKouhoBpin[0] + arKouhoBsou[0] + arKouhojihai[0];
	int nMentsuKouhoB = arKouhoBman[1] + arKouhoBpin[1] + arKouhoBsou[1] + arKouhojihai[1];
	if (nMentsuB + nMentsuKouhoB > 4)
		nMentsuKouhoB = 4 - nMentsuB;
	int shantenKouhoB = 8 - (2 * nMentsuB) - nMentsuKouhoB;
	//より小さい方を選択
	if (shantenKouhoA < shanten)
	{
		shanten = shantenKouhoA;
		atama = "";
		arMentsu = makeMenstu(arKouhoAman[2], arKouhoApin[2], arKouhoAsou[2], arKouhojihai[2]);
		arMentsuKouho = makeMenstu(arKouhoAman[3], arKouhoApin[3], arKouhoAsou[3], arKouhojihai[3]);
	}
	if (shantenKouhoB < shanten)
	{
		shanten = shantenKouhoB;
		atama = "";
		arMentsu = makeMenstu(arKouhoBman[2], arKouhoBpin[2], arKouhoBsou[2], arKouhojihai[2]);
		arMentsuKouho = makeMenstu(arKouhoBman[3], arKouhoBpin[3], arKouhoBsou[3], arKouhojihai[3]);
	}
	return {shanten, atama, arMentsu, arMentsuKouho};
}

array makeMenstu(array arMenstuMan, array arMenstuPin, array arMenstuSou, array arMenstuJihai)
{
	array arMenstuRet;
	for (int i = 0; arMenstuMan[i] != nil; i++)
	{
		array arMenstuTempRet = {};
		for (int j = 0; arMenstuMan[i][j] != nil; j++)
		{
			arMenstuTempRet += "" + arMenstuMan[i][j] + "m";
		}
		arMenstuRet += arMenstuTempRet;
	}
	for (int i = 0; arMenstuPin[i] != nil; i++)
	{
		array arMenstuTempRet = {};
		for (int j = 0; arMenstuPin[i][j] != nil; j++)
		{
			arMenstuTempRet += "" + arMenstuPin[i][j] + "p";
		}
		arMenstuRet += arMenstuTempRet;
	}
	for (int i = 0; arMenstuSou[i] != nil; i++)
	{
		array arMenstuTempRet = {};
		for (int j = 0; arMenstuSou[i][j] != nil; j++)
		{
			arMenstuTempRet += "" + arMenstuSou[i][j] + "s";
		}
		arMenstuRet += arMenstuTempRet;
	}
	for (int i = 0; arMenstuJihai[i] != nil; i++)
	{
		array arMenstuTempRet = {};
		for (int j = 0; arMenstuJihai[i][j] != nil; j++)
		{
			arMenstuTempRet += "" + arMenstuJihai[i][j] + "z";
		}
		arMenstuRet += arMenstuTempRet;
	}
	return arMenstuRet;
}

//孤立牌の除去
array removeKoritsuHai(array hai)
{
	array arRet;
	for (int i = 0; hai[i] != nil; i++)
	{
		int num = _substr(hai[i], 0, 1);
		string color = _substr(hai[i], 1, 1);
		if (color == "m" || color == "p" || color == "s")
		{
			string haiP2 = "" + (num - 2) + color;
			string haiP1 = "" + (num - 1) + color;
			string haiN1 = "" + (num + 1) + color;
			string haiN2 = "" + (num + 2) + color;
			if (ASEARCH(haiP2, hai) >= 0
				|| ASEARCH(haiP1, hai) >= 0
				|| _aryvn(ASEARCHEX(hai[i], hai)) > 1
				|| ASEARCH(haiN1, hai) >= 0
				|| ASEARCH(haiN2, hai) >= 0)
			{
				arRet += hai[i];
			}
		}
		else if (color == "z")
		{
			if (_aryvn(ASEARCHEX(hai[i], hai)) > 1)
			{
				arRet += hai[i];
			}
		}
	}
	return arRet;
}

array getMentsu(array hai)
{
	array arHai = convertNumArray(hai);
	array arKotsu = getKotsu(arHai);
	array arKotsuPattern;
	switch (_aryvn(arKotsu))
	{
	case 0:
		arKotsuPattern = {{}};
		break;
	case 1:
		arKotsuPattern = {{}, {arKotsu[0]}};
		break;
	case 2:
		arKotsuPattern = {{}, {arKotsu[0]}, {arKotsu[1]}, {arKotsu[0], arKotsu[1]}};
		break;
	case 3:
		arKotsuPattern = {{}, {arKotsu[0]}, {arKotsu[1]}, {arKotsu[2]}, {arKotsu[0], arKotsu[1]}, {arKotsu[0], arKotsu[2]}, {arKotsu[1], arKotsu[2]}, {arKotsu[0], arKotsu[1], arKotsu[2]}};
		break;
	case 4://四暗刻
		return {4, 0};
	default:
		break;
	}
	int pointA = -1;
	int pointB = -1;
	array arRetA = {0, 0, {}};
	array arRetB = {0, 0, {}};
	for (int i = 0; arKotsuPattern[i] != nil; i++)
	{
		array arKotsulessHai = arHai;
		int nKotsu = _aryvn(arKotsuPattern[i]);
		for (int j = 0; arKotsuPattern[i][j] != nil; j++)
		{
			arKotsulessHai = removeElementByName(arKotsulessHai, arKotsuPattern[i][j], 3);
		}
		array arShuntsuRes = getMaxShuntsu(arKotsulessHai, 0, {});
		int nShuntsu = arShuntsuRes[0];
		array leftHai = arShuntsuRes[1];
		array arShuntsu = arShuntsuRes[2];
		//面子の配列を作成
		array arMentsu = {};
		for (int j = 0; arKotsuPattern[i][j] != nil; j++)
		{
			int n = arKotsuPattern[i][j];
			arMentsu += {n, n, n};
		}
		for (int j = 0; arShuntsu[j] != nil; j++)
		{
			int n = arShuntsu[j];
			arMentsu += {n, n + 1, n + 2};
		}

		array arMentsuKouho = getMaxMentsuKouho(leftHai, 0, {});
		int nMentsuKouho = arMentsuKouho[0];
		array arRetMentsuKouho = arMentsuKouho[2];

		int nMentsu = nKotsu + nShuntsu;
		int pointKouhoA = 2 * nMentsu + nMentsuKouho;
		int pointKouhoB = 10 * nMentsu + nMentsuKouho;
		if (pointA < pointKouhoA)
		{
			pointA = pointKouhoA;
			arRetA = {nMentsu, nMentsuKouho, arMentsu, arRetMentsuKouho};
		}
		if (pointB < pointKouhoB)
		{
			pointB = pointKouhoB;
			arRetB = {nMentsu, nMentsuKouho, arMentsu, arRetMentsuKouho};
		}
	}
	return {arRetA, arRetB};
}

array getMentsuJihai(array hai)
{
	array arHai = convertNumArray(hai);
	array arKotsu = getKotsu(arHai);
	int nKotsu = _aryvn(arKotsu);
	//面子の配列を作成
	array arMentsu = {};
	for (int i = 0; arKotsu[i] != nil; i++)
	{
		int n = arKotsu[i];
		arMentsu += {n, n, n};
	}
	for (int i = 0; arKotsu[i] != nil; i++)
	{
		arHai = removeElementByName(arHai, arKotsu[i], 3);
	}
	array arToitsu = getToitsu(arHai);
	int nKotsuKouho = _aryvn(arToitsu);
	array arKotsuKouho;
	for (int i = 0; arToitsu[i] != nil; i++)
	{
		arKotsuKouho += {arToitsu[i], arToitsu[i]};
	}
	int nMentsu = nKotsu;
	int nMentsuKouho = nKotsuKouho;
	return {nMentsu, nMentsuKouho, arMentsu, arKotsuKouho};
}

array getMaxShuntsu(array nHai, int nShuntsu, array arShuntsu)
{
	array arShuntsuKouho = getShuntsuKouho(nHai);
	if (_aryvn(arShuntsuKouho) > 0)
	{
		int nShuntsuMax = nShuntsu;
		array rHai = nHai;
		array rShuntsu = arShuntsu;
		for (int i = 0; arShuntsuKouho[i] != nil; i++)
		{
			int n = arShuntsuKouho[i];
			array tmpHai = removeShuntsu(nHai, n);
			array tmpShuntsu = arShuntsu;
			tmpShuntsu += n;
			array arNext = getMaxShuntsu(tmpHai, nShuntsu + 1, tmpShuntsu);
			int nextShuntsu = arNext[0];
			array nextHai = arNext[1];
			array arNextShuntsu = arNext[2];
			if (nShuntsuMax < nextShuntsu)
			{
				nShuntsuMax = nextShuntsu;
				rHai = nextHai;
				rShuntsu = arNextShuntsu;
			}
		}
		return {nShuntsuMax, rHai, rShuntsu};
	}
	else
	{
		return {nShuntsu, nHai, arShuntsu};
	}
}

array getMaxMentsuKouho(array nHai, int nMentsuKouho, array arRetMentsuKouho)
{
	array arMentsuKouho = getMentsuKouho(nHai);
	if (_aryvn(arMentsuKouho) > 0)
	{
		int nMentsuKouhoMax = nMentsuKouho;
		array rHai = nHai;
		array rMentsuKouho = arRetMentsuKouho;
		for (int i = 0; arMentsuKouho[i] != nil; i++)
		{
			array tmpHai = removeMentsuKouho(nHai, arMentsuKouho[i]);
			array tmpMentsuKouho = arRetMentsuKouho;
			tmpMentsuKouho += arMentsuKouho[i];
			array arNext = getMaxMentsuKouho(tmpHai, nMentsuKouho + 1, tmpMentsuKouho);
			int nNextMentsuKouho = arNext[0];
			array nextHai = arNext[1];
			array arNextMentsuKouho = arNext[2];
			if (nMentsuKouhoMax < nNextMentsuKouho)
			{
				nMentsuKouhoMax = nNextMentsuKouho;
				rHai = nextHai;
				rMentsuKouho = arNextMentsuKouho;
			}
		}
		return {nMentsuKouhoMax, rHai, rMentsuKouho};
	}
	else
	{
		return {nMentsuKouho, nHai, arRetMentsuKouho};
	}
}

//{1,1} {1,2} {1,3}等
array getMentsuKouho(array ary)
{
	array arRet;
	for (int i = 1; i <= 9; i++)
	{
		if (_aryvn(ASEARCHEX(i, ary)) >= 2)
		{
			arRet += {i, i};
		}
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 1, ary) >= 0)
		{
			arRet += {i, i + 1};
		}
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 2, ary) >= 0)
		{
			arRet += {i, i + 2};
		}
	}
	return arRet;
}

array removeMentsuKouho(array ary, array rem)
{
	array arRet = ary;
	for (int i = 0; rem[i] != nil; i++)
	{
		arRet = removeElementByName(arRet, rem[i], 1);
	}
	return arRet;
}

array convertNumArray(array hai)
{
	array arNum;
	for (int i = 0; hai[i] != nil; i++)
	{
		arNum += (int)_substr(hai[i], 0, 1);
	}
	return arNum;
}

//7,8,9が存在すれば7を含める
array getShuntsuKouho(array ary)
{
	array arRet;
	for (int i = 1; i <= 7; i++)
	{
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 1, ary) >= 0 && ASEARCH(i + 2, ary) >= 0)
		{
			arRet += i;
		}
	}
	return arRet;
}

array getSupai(array hai)
{
	array arRet = {{}, {}, {}, {}};
	for (int i = 0; hai[i] != nil; i++)
	{
		switch (_substr(hai[i], 1, 1))
		{
		case "m":
			arRet[0] += hai[i];
			break;
		case "p":
			arRet[1] += hai[i];
			break;
		case "s":
			arRet[2] += hai[i];
			break;
		case "z":
			arRet[3] += hai[i];
			break;
		default:
			break;
		}
	}
	return arRet;
}

array removeShuntsu(array ary, int num)
{
	array arRet = ary;
	arRet = removeElementByName(arRet, num, 1);
	arRet = removeElementByName(arRet, num + 1, 1);
	arRet = removeElementByName(arRet, num + 2, 1);
	return arRet;
}

array removeElementByName(array ary, string name, int count)
{
	array arRet;
	int n = 0;
	for (int i = 0; ary[i] != nil; i++)
	{
		if (ary[i] == name && n < count)
		{
			n++;
		}
		else
		{
			arRet += ary[i];
		}
	}
	return arRet;
}

//3個以上同じ牌がある要素をすべて返す
array getKotsu(array hai)
{
	return getDuplicatedElement(hai, 3);
}

//2個以上同じ牌がある要素をすべて返す
array getToitsu(array hai)
{
	return getDuplicatedElement(hai, 2);
}

//重複した要素を返す
array getDuplicatedElement(array ary, int n)
{
	dict d;
	for (int i = 0; ary[i] != nil; i++)
	{
		string key = ary[i];
		if (d[key] == nil)
		{
			array a = ASEARCHEX(key, ary);
			if (_aryvn(a) >= n)
				d += $(key, 1);
		}
	}
	return _dickeyget(d);
}

//YAYAのASEARCH
int ASEARCH(string key, array ary)
{
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			return i;
	}
	return -1;
}

//YAYAのASEARCHEX
array ASEARCHEX(string key, array ary)
{
	array ret = {};
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			ret += i;
	}
	return ret;
}

//rubyのuniq
array uniq(array ary)
{
	dict d;
	for (int i = 0; ary[i] != nil; i++)
	{
		string key = ary[i];
		if (d[key] == nil)
			d += $(key, 1);
	}
	return _dickeyget(d);
}

//====================================================================

//七対子
int getShantenChitoitsu(array hai)
{
	int nToitsu = _aryvn(getToitsu(hai));
	int nType = _aryvn(uniq(hai));
	if (nType > 7)
		nType = 7;
	return 6 - nToitsu + (7 - nType);
}

//国士無双
int getShantenKokushi(array hai)
{
	string strYaochu = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	array haiYaochu;
	for (int i = 0; hai[i] != nil; i++)
	{
		if (_strstr(strYaochu, hai[i]) >= 0)
			haiYaochu += hai[i];
	}
	int nToitsu = _aryvn(getToitsu(haiYaochu));
	int nType = _aryvn(uniq(haiYaochu));
	int hasToitsu = 0;
	if (nToitsu > 0)
		hasToitsu = 1;
	return 13 - nType - hasToitsu;
}
