//haiはソートされてる前提
int getShanten(array hai)
{
	int shanten = _saorirequest("MahjongUtil", "shanten", _arystr(hai))["Result"];
	return shanten;
}

array getShantenWithMentsu(array hai)
{
	dict d = _saorirequest("MahjongUtil", "shanten", _arystr(hai));
	int shanten = d["Result"];
	string atama = d["Value0"];
	string strMentsu = d["Value1"];
	string strTatsu = d["Value2"];
	array a1 = _strsplit(strMentsu, ",");
	array arMentsu;
	for (int i = 0; a1[i] != nil; i++)
	{
		arMentsu += strHaiToArray(a1[i]);
	}
	array a2 = _strsplit(strTatsu, ",");
	array arTatsu;
	for (int i = 0; a2[i] != nil; i++)
	{
		arTatsu += strHaiToArray(a2[i]);
	}
	return {shanten, atama, arMentsu, arTatsu};
}

array strHaiToArray(string strHai)
{
	array arRet;
	for (int i = 0; i < _strlen(strHai); i += 2)
	{
		arRet += _substr(strHai, i, 2);
	}
	return arRet;
}

int getMin(array a)
{
	int r = 99;
	for (int i = 0; a[i] != nil; i++)
	{
		if (a[i] < r)
			r = a[i];
	}
	return r;
}

int getShantenNormal(array hai)
{
	array a = getShantenNormalWithMentsuByAkari(hai);
	int r = a[0];
	return r;
}

array getShantenNormalWithMentsuByAkari(array hai)
{
	//孤立牌の除去
	hai = removeKoritsuHai(hai);
	//雀頭候補
	array arAtamaKouho = getToitsu(hai);
	arAtamaKouho += "";//雀頭無しの場合
	int shanten;
	int shantenA = 99;
	int shantenB = 99;
	array arMentsuAndTatsu;
	array arMentsuAndTatsuA;
	array arMentsuAndTatsuB;
	for (int i = 0; arAtamaKouho[i] != nil; i++)
	{
		string atama = arAtamaKouho[i];
		array haiWithoutAtama = removeElementByName(hai, atama, 2);
		array a = getSupai(haiWithoutAtama);
		array man = a[0];
		array pin = a[1];
		array sou = a[2];
		array jihai = a[3];
		array arKouhoMan = getMentsu(man);
		array arKouhoPin = getMentsu(pin);
		array arKouhoSou = getMentsu(sou);
		array arKouhojihai = getMentsuJihai(jihai);
		array arKouhoAman = arKouhoMan[0];
		array arKouhoApin = arKouhoPin[0];
		array arKouhoAsou = arKouhoSou[0];
		array arKouhoBman = arKouhoMan[1];
		array arKouhoBpin = arKouhoPin[1];
		array arKouhoBsou = arKouhoSou[1];
		//Patern A
		int nMentsuA = _aryvn(arKouhoAman[0][0]) + _aryvn(arKouhoApin[0][0]) + _aryvn(arKouhoAsou[0][0]) + _aryvn(arKouhojihai[0][0]);
		int nTatsuA = _aryvn(arKouhoAman[0][1]) + _aryvn(arKouhoApin[0][1]) + _aryvn(arKouhoAsou[0][1]) + _aryvn(arKouhojihai[0][1]);
		if (nMentsuA + nTatsuA > 4)
			nTatsuA = 4 - nMentsuA;
		int shantenKouhoA = 8 - (2 * nMentsuA) - nTatsuA;
		//Patern B
		int nMentsuB = _aryvn(arKouhoBman[0][0]) + _aryvn(arKouhoBpin[0][0]) + _aryvn(arKouhoBsou[0][0]) + _aryvn(arKouhojihai[0][0]);
		int nTatsuB = _aryvn(arKouhoBman[0][1]) + _aryvn(arKouhoBpin[0][1]) + _aryvn(arKouhoBsou[0][1]) + _aryvn(arKouhojihai[0][1]);
		if (nMentsuB + nTatsuB > 4)
			nTatsuB = 4 - nMentsuB;
		int shantenKouhoB = 8 - (2 * nMentsuB) - nTatsuB;
		if (atama != "")
		{
			shantenKouhoA--;
			shantenKouhoB--;
		}
		//より小さい方を選択
		if (shantenKouhoA < shantenA)
		{
			shantenA = shantenKouhoA;
			arMentsuAndTatsuA = makeMentsu(atama, arKouhoAman, arKouhoApin, arKouhoAsou, arKouhojihai);
		}
		else if (shantenKouhoA == shantenA)
		{
			arMentsuAndTatsuA = arrayAppend(arMentsuAndTatsuA, makeMentsu(atama, arKouhoAman, arKouhoApin, arKouhoAsou, arKouhojihai));
		}
		if (shantenKouhoB < shantenB)
		{
			shantenB = shantenKouhoB;
			arMentsuAndTatsuB = makeMentsu(atama, arKouhoBman, arKouhoBpin, arKouhoBsou, arKouhojihai);
		}
		else if (shantenKouhoB == shantenB)
		{
			arMentsuAndTatsuB = arrayAppend(arMentsuAndTatsuB, makeMentsu(atama, arKouhoBman, arKouhoBpin, arKouhoBsou, arKouhojihai));
		}
	}
	if (shantenA < shantenB)
	{
		shanten = shantenA;
		arMentsuAndTatsu = arMentsuAndTatsuA;
	}
	else if (shantenA > shantenB)
	{
		shanten = shantenB;
		arMentsuAndTatsu = arMentsuAndTatsuB;
	}
	else
	{
		shanten = shantenA;
		arMentsuAndTatsu = arMentsuAndTatsuA;
		//TODO: 重複を排除しつつ合成
	}
	return {shanten, arMentsuAndTatsu};
}

array arrayAppend(array a1, array a2)
{
	for (int i = 0; a2[i] != nil; i++)
	{
		a1 += a2[i];
	}
	return a1;
}

array makeMentsu(string atama, array arMentsuMan, array arMentsuPin, array arMentsuSou, array arMentsuJihai)
{
	array arMentsuRet;
	string sAtama = atama + atama;
	for (int im = 0; arMentsuMan[im] != nil; im++)
	{
		array arMentsuM = arMentsuMan[im][0];
		array arTatsuM = arMentsuMan[im][1];
		string sm;
		for (int jm = 0; arMentsuM[jm] != nil; jm++)
		{
			sm += ",";
			for (int km = 0; arMentsuM[jm][km] != nil; km++)
			{
				sm += "" + arMentsuM[jm][km] + "m";
			}
		}
		for (int jm = 0; arTatsuM[jm] != nil; jm++)
		{
			sm += ",";
			for (int km = 0; arTatsuM[jm][km] != nil; km++)
			{
				sm += "" + arTatsuM[jm][km] + "m";
			}
		}
		for (int ip = 0; arMentsuPin[ip] != nil; ip++)
		{
			array arMentsuP = arMentsuPin[ip][0];
			array arTatsuP = arMentsuPin[ip][1];
			string sp;
			for (int jp = 0; arMentsuP[jp] != nil; jp++)
			{
				sp += ",";
				for (int kp = 0; arMentsuP[jp][kp] != nil; kp++)
				{
					sp += "" + arMentsuP[jp][kp] + "p";
				}
			}
			for (int jp = 0; arTatsuP[jp] != nil; jp++)
			{
				sp += ",";
				for (int kp = 0; arTatsuP[jp][kp] != nil; kp++)
				{
					sp += "" + arTatsuP[jp][kp] + "p";
				}
			}
			for (int is = 0; arMentsuSou[is] != nil; is++)
			{
				array arMentsuS = arMentsuSou[is][0];
				array arTatsuS = arMentsuSou[is][1];
				string ss;
				for (int js = 0; arMentsuS[js] != nil; js++)
				{
					ss += ",";
					for (int ks = 0; arMentsuS[js][ks] != nil; ks++)
					{
						ss += "" + arMentsuS[js][ks] + "s";
					}
				}
				for (int js = 0; arTatsuS[js] != nil; js++)
				{
					ss += ",";
					for (int ks = 0; arTatsuS[js][ks] != nil; ks++)
					{
						ss += "" + arTatsuS[js][ks] + "s";
					}
				}
				for (int ij = 0; arMentsuJihai[ij] != nil; ij++)
				{
					array arMentsuZ = arMentsuJihai[ij][0];
					array arTatsuZ = arMentsuJihai[ij][1];
					string sj;
					for (int jj = 0; arMentsuZ[jj] != nil; jj++)
					{
						sj += ",";
						for (int kj = 0; arMentsuZ[jj][kj] != nil; kj++)
						{
							sj += "" + arMentsuZ[jj][kj] + "z";
						}
					}
					for (int jj = 0; arTatsuZ[jj] != nil; jj++)
					{
						sj += ",";
						for (int kj = 0; arTatsuZ[jj][kj] != nil; kj++)
						{
							sj += "" + arTatsuZ[jj][kj] + "z";
						}
					}
					arMentsuRet += sAtama + sm + sp + ss + sj;
				}
			}
		}
	}
	return arMentsuRet;
}

//孤立牌の除去
array removeKoritsuHai(array hai)
{
	array arRet;
	for (int i = 0; hai[i] != nil; i++)
	{
		int num = _substr(hai[i], 0, 1);
		string color = _substr(hai[i], 1, 1);
		if (color == "m" || color == "p" || color == "s")
		{
			string haiP2 = "" + (num - 2) + color;
			string haiP1 = "" + (num - 1) + color;
			string haiN1 = "" + (num + 1) + color;
			string haiN2 = "" + (num + 2) + color;
			if (ASEARCH(haiP2, hai) >= 0
				|| ASEARCH(haiP1, hai) >= 0
				|| _aryvn(ASEARCHEX(hai[i], hai)) > 1
				|| ASEARCH(haiN1, hai) >= 0
				|| ASEARCH(haiN2, hai) >= 0)
			{
				arRet += hai[i];
			}
		}
		else if (color == "z")
		{
			if (_aryvn(ASEARCHEX(hai[i], hai)) > 1)
			{
				arRet += hai[i];
			}
		}
	}
	return arRet;
}

array getMentsu(array hai)
{
	array arHai = convertNumArray(hai);
	array arKotsu = getKotsu(arHai);
	array arKotsuPattern;
	switch (_aryvn(arKotsu))
	{
	case 0:
		arKotsuPattern = {{}};
		break;
	case 1:
		arKotsuPattern = {{}, {arKotsu[0]}};
		break;
	case 2:
		arKotsuPattern = {{}, {arKotsu[0]}, {arKotsu[1]}, {arKotsu[0], arKotsu[1]}};
		break;
	case 3:
		arKotsuPattern = {{}, {arKotsu[0]}, {arKotsu[1]}, {arKotsu[2]}, {arKotsu[0], arKotsu[1]}, {arKotsu[0], arKotsu[2]}, {arKotsu[1], arKotsu[2]}, {arKotsu[0], arKotsu[1], arKotsu[2]}};
		break;
	case 4://四暗刻
		array arMentsu = {};
		for (int i = 0; arKotsu[i] != nil; i++)
		{
			arMentsu += {arKotsu[i], arKotsu[i], arKotsu[i]};
		}
		return {{{arMentsu, {}}}, {{arMentsu, {}}}};
	default:
		break;
	}
	int pointA = -1;
	int pointB = -1;
	array arRetA;
	array arRetB;
	for (int i = 0; arKotsuPattern[i] != nil; i++)
	{
		array arKotsulessHai = arHai;
		int nKotsu = _aryvn(arKotsuPattern[i]);
		for (int j = 0; arKotsuPattern[i][j] != nil; j++)
		{
			arKotsulessHai = removeElementByName(arKotsulessHai, arKotsuPattern[i][j], 3);
		}
		array arShuntsuRes = getMaxShuntsu(arKotsulessHai, 0, {});
		int nShuntsu = arShuntsuRes[0];
		array leftHai = arShuntsuRes[1];
		array arShuntsu = arShuntsuRes[2];
		//面子の配列を作成
		array arMentsu = {};
		for (int j = 0; arKotsuPattern[i][j] != nil; j++)
		{
			int n = arKotsuPattern[i][j];
			arMentsu += {n, n, n};
		}
		for (int j = 0; arShuntsu[j] != nil; j++)
		{
			int n = arShuntsu[j];
			arMentsu += {n, n + 1, n + 2};
		}

		array arTatsu = getMaxTatsu(leftHai, 0, {});
		int nTatsu = arTatsu[0];
		array arRetTatsu = arTatsu[2];

		int nMentsu = nKotsu + nShuntsu;
		int pointKouhoA = 2 * nMentsu + nTatsu;
		int pointKouhoB = 10 * nMentsu + nTatsu;
		if (pointA < pointKouhoA)
		{
			pointA = pointKouhoA;
			arRetA = {{arMentsu, arRetTatsu}};
		}
		else if (pointA == pointKouhoA)
		{
			arRetA += {arMentsu, arRetTatsu};
		}
		if (pointB < pointKouhoB)
		{
			pointB = pointKouhoB;
			arRetB = {{arMentsu, arRetTatsu}};
		}
		else if (pointB == pointKouhoB)
		{
			arRetB += {arMentsu, arRetTatsu};
		}
	}
	return {arRetA, arRetB};
}

array getMentsuJihai(array hai)
{
	array arHai = convertNumArray(hai);
	array arKotsu = getKotsu(arHai);
	//面子の配列を作成
	array arMentsu = {};
	for (int i = 0; arKotsu[i] != nil; i++)
	{
		int n = arKotsu[i];
		arMentsu += {n, n, n};
	}
	for (int i = 0; arKotsu[i] != nil; i++)
	{
		arHai = removeElementByName(arHai, arKotsu[i], 3);
	}
	array arToitsu = getToitsu(arHai);
	array arKotsuKouho;
	for (int i = 0; arToitsu[i] != nil; i++)
	{
		arKotsuKouho += {arToitsu[i], arToitsu[i]};
	}
	return {{arMentsu, arKotsuKouho}};
}

array getMaxShuntsu(array nHai, int nShuntsu, array arShuntsu)
{
	array arShuntsuKouho = getShuntsuKouho(nHai);
	if (_aryvn(arShuntsuKouho) > 0)
	{
		int nShuntsuMax = nShuntsu;
		array rHai = nHai;
		array rShuntsu = arShuntsu;
		for (int i = 0; arShuntsuKouho[i] != nil; i++)
		{
			int n = arShuntsuKouho[i];
			array tmpHai = removeShuntsu(nHai, n);
			array tmpShuntsu = arShuntsu;
			tmpShuntsu += n;
			array arNext = getMaxShuntsu(tmpHai, nShuntsu + 1, tmpShuntsu);
			int nextShuntsu = arNext[0];
			array nextHai = arNext[1];
			array arNextShuntsu = arNext[2];
			if (nShuntsuMax < nextShuntsu)
			{
				nShuntsuMax = nextShuntsu;
				rHai = nextHai;
				rShuntsu = arNextShuntsu;
			}
		}
		return {nShuntsuMax, rHai, rShuntsu};
	}
	else
	{
		return {nShuntsu, nHai, arShuntsu};
	}
}

array getMaxTatsu(array nHai, int nTatsu, array arRetTatsu)
{
	array arTatsu = getTatsu(nHai);
	if (_aryvn(arTatsu) > 0)
	{
		int nTatsuMax = nTatsu;
		array rHai = nHai;
		array rTatsu = arRetTatsu;
		for (int i = 0; arTatsu[i] != nil; i++)
		{
			array tmpHai = removeTatsu(nHai, arTatsu[i]);
			array tmpTatsu = arRetTatsu;
			tmpTatsu += arTatsu[i];
			array arNext = getMaxTatsu(tmpHai, nTatsu + 1, tmpTatsu);
			int nNextTatsu = arNext[0];
			array nextHai = arNext[1];
			array arNextTatsu = arNext[2];
			if (nTatsuMax < nNextTatsu)
			{
				nTatsuMax = nNextTatsu;
				rHai = nextHai;
				rTatsu = arNextTatsu;
			}
		}
		return {nTatsuMax, rHai, rTatsu};
	}
	else
	{
		return {nTatsu, nHai, arRetTatsu};
	}
}

//{1,1} {1,2} {1,3}等
array getTatsu(array ary)
{
	array arRet;
	for (int i = 1; i <= 9; i++)
	{
		if (_aryvn(ASEARCHEX(i, ary)) >= 2)
		{
			arRet += {i, i};
		}
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 1, ary) >= 0)
		{
			arRet += {i, i + 1};
		}
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 2, ary) >= 0)
		{
			arRet += {i, i + 2};
		}
	}
	return arRet;
}

array removeTatsu(array ary, array rem)
{
	array arRet = ary;
	for (int i = 0; rem[i] != nil; i++)
	{
		arRet = removeElementByName(arRet, rem[i], 1);
	}
	return arRet;
}

array convertNumArray(array hai)
{
	array arNum;
	for (int i = 0; hai[i] != nil; i++)
	{
		arNum += (int)_substr(hai[i], 0, 1);
	}
	return arNum;
}

//7,8,9が存在すれば7を含める
array getShuntsuKouho(array ary)
{
	array arRet;
	for (int i = 1; i <= 7; i++)
	{
		if (ASEARCH(i, ary) >= 0 && ASEARCH(i + 1, ary) >= 0 && ASEARCH(i + 2, ary) >= 0)
		{
			arRet += i;
		}
	}
	return arRet;
}

array getSupai(array hai)
{
	array arRet = {{}, {}, {}, {}};
	for (int i = 0; hai[i] != nil; i++)
	{
		switch (_substr(hai[i], 1, 1))
		{
		case "m":
			arRet[0] += hai[i];
			break;
		case "p":
			arRet[1] += hai[i];
			break;
		case "s":
			arRet[2] += hai[i];
			break;
		case "z":
			arRet[3] += hai[i];
			break;
		default:
			break;
		}
	}
	return arRet;
}

array removeShuntsu(array ary, int num)
{
	array arRet = ary;
	arRet = removeElementByName(arRet, num, 1);
	arRet = removeElementByName(arRet, num + 1, 1);
	arRet = removeElementByName(arRet, num + 2, 1);
	return arRet;
}

array removeElementByName(array ary, string name, int count)
{
	array arRet;
	int n = 0;
	for (int i = 0; ary[i] != nil; i++)
	{
		if (ary[i] == name && n < count)
		{
			n++;
		}
		else
		{
			arRet += ary[i];
		}
	}
	return arRet;
}

//3個以上同じ牌がある要素をすべて返す
array getKotsu(array hai)
{
	return getDuplicatedElement(hai, 3);
}

//2個以上同じ牌がある要素をすべて返す
array getToitsu(array hai)
{
	return getDuplicatedElement(hai, 2);
}

//重複した要素を返す
array getDuplicatedElement(array ary, int n)
{
	dict d;
	for (int i = 0; ary[i] != nil; i++)
	{
		string key = ary[i];
		if (d[key] == nil)
		{
			array a = ASEARCHEX(key, ary);
			if (_aryvn(a) >= n)
				d += $(key, 1);
		}
	}
	return _dickeyget(d);
}

//YAYAのASEARCH
int ASEARCH(string key, array ary)
{
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			return i;
	}
	return -1;
}

//YAYAのASEARCHEX
array ASEARCHEX(string key, array ary)
{
	array ret = {};
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			ret += i;
	}
	return ret;
}

//rubyのuniq
array uniq(array ary)
{
	dict d;
	for (int i = 0; ary[i] != nil; i++)
	{
		string key = ary[i];
		if (d[key] == nil)
			d += $(key, 1);
	}
	return _dickeyget(d);
}

//====================================================================

//七対子
int getShantenChitoitsu(array hai)
{
	int nToitsu = _aryvn(getToitsu(hai));
	int nType = _aryvn(uniq(hai));
	if (nType > 7)
		nType = 7;
	return 6 - nToitsu + (7 - nType);
}

//国士無双
int getShantenKokushi(array hai)
{
	string strYaochu = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	array haiYaochu;
	for (int i = 0; hai[i] != nil; i++)
	{
		if (_strstr(strYaochu, hai[i]) >= 0)
			haiYaochu += hai[i];
	}
	int nToitsu = _aryvn(getToitsu(haiYaochu));
	int nType = _aryvn(uniq(haiYaochu));
	int hasToitsu = 0;
	if (nToitsu > 0)
		hasToitsu = 1;
	return 13 - nType - hasToitsu;
}
