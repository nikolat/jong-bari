//******************************************************************************
// 設定
//******************************************************************************
//手牌オープン
int openTehai = 0;
//通信のタイムアウト設定(s)
double timeout = 2.000;

//******************************************************************************
// グローバル変数
//******************************************************************************
//ゲームで使用する変数
array arYama;
array arTehai = {"", "", "", ""};
array arKawa = {{}, {}, {}, {}};
array arFuritenCheckRichi = {{}, {}, {}, {}};
array arFuritenCheckTurn = {{}, {}, {}, {}};
array arScore = {25000, 25000, 25000, 25000};
array arRichiJunme = {-1, -1, -1, -1};
array arFuroJunme = {{}, {}, {}, {}};
array arFuroHistory = {{}, {}, {}, {}};
array arKakanHistory =  {{}, {}, {}, {}};
string dorahyouji;
int nYamaIndex;
int isGameStarted = 0;
int bafu = 0;//東:0, 南:1
array arBafu = {"東", "南"};
int kyoku = 0;//1 - 4
int oyaIndex = -1;
int tsumibou;
int kyotaku;
array playerName;
int isRinshanChance;
array arIppatsuChance = {0, 0, 0, 0};
array arChihouChance = {1, 1, 1, 1};
array arWRichi = {0, 0, 0, 0};
int isSoloMode;
int modeEx;
//バルーン表示保存用
string lastScript;
int isLockedSingleClick;
int isLockedDoubleClick;
//シェル表示保存用
array arSavedTehai = {{}, {}, {}, {}};
string savedTsumo;
array arSavedWordCommand;
string reservedClickScript;
//クライアントからのレスポンス保存用
string reservedSelectedHai;
int reservedRichi;
int reservedTsumo;
int reservedKakan;
int reservedAnkan;
dict reservedNaku;
dict reservedTenpai;
string reservedScript;
dict dResponseNeed;
int isRecievedResponse;

//******************************************************************************
// OnMahjongResponse
//******************************************************************************
string OnMahjongResponse(dict ref)
{
	string version = ref["Reference0"];
	if (version != getVersion())
		return "";
	string command = ref["Reference1"];
	string name = ref["Sender"];
	if (command != "hello")
	{
		if (dResponseNeed[name] != command)
		{
			dAdditionalHeader = ${
				$("ErrorLevel", "warning"),
				$("ErrorDescription", name + "'s '" + command + "' command failed, maybe timeout.")
			};
			return "";
		}
		dResponseNeed[name] = "";
	}
	switch (command)
	{
	case "hello":
		array a = _strsplit(ref["Reference3"], "=");
		if (a[0] == "name")
			name = a[1];
		else
			return "";
		if (_aryvn(playerName) >= 3)
			return "";//定員オーバー
		if (ASEARCH(name, playerName) >= 0)
			return "";//同名のキャラが参加済
		playerName += name;
		if (_aryvn(playerName) == 3)
		{
			playerName += "user";
			return showBalloon();
		}
		else
		{
			return "";
		}
		break;
	case "sutehai?":
		string action = ref["Reference2"];
		switch (action)
		{
		case ""://お任せモード
			break;
		case "sutehai":
			reservedSelectedHai = ref["Reference3"];
			break;
		case "richi":
			reservedSelectedHai = ref["Reference3"];
			reservedRichi = 1;
			break;
		case "tsumo":
			reservedTsumo = 1;
			break;
		case "kakan":
			reservedSelectedHai = ref["Reference3"];
			reservedKakan = 1;
			break;
		case "ankan":
			reservedSelectedHai = ref["Reference3"];
			reservedAnkan = 1;
			break;
		default:
			break;
		}
		isRecievedResponse = 1;
		break;
	case "naku?":
		reservedNaku[name] = {ref["Reference2"], ref["Reference3"], ref["Reference4"]};
		int count = 0;
		for (int i = 0; i < 3; i++)
		{
			if (dResponseNeed[playerName[i]] == command)
				count++;
		}
		if (count == 0)
			isRecievedResponse = 1;
		break;
	case "tenpai?":
		string action = ref["Reference2"];
		reservedTenpai[name] = action;
		int count = 0;
		for (int i = 0; i < 3; i++)
		{
			if (dResponseNeed[playerName[i]] == command)
				count++;
		}
		if (count == 0)
			isRecievedResponse = 1;
		break;
	default:
		break;
	}
	return "";
}

TH_WaitResponse()
{
	double wait = 0.125;
	int nLoop = 8 * timeout;
	for (int i = 0; i < nLoop; i++)
	{
		if (isSoloMode)
			break;
		_sleep(wait);
		if (isRecievedResponse)
		{
			isRecievedResponse = 0;
			break;
		}
	}
	for (int i = 0; i < 3; i++)
	{
		if (dResponseNeed[playerName[i]] != "")
		{
			_speak("\![raise,OnMahjongResponseTimeout," + playerName[i] + "," + dResponseNeed[playerName[i]] + "]");
			dResponseNeed[playerName[i]] = "";
			_sleep(wait);
		}
	}
	string s = reservedScript;
	reservedScript = "";
	if (s != "")
		_speak(s);
}

string OnMahjongResponseTimeout(dict ref)
{
	string name = ref["Reference0"];
	string command = ref["Reference1"];
	dAdditionalHeader = ${
		$("ErrorLevel", "info"),
		$("ErrorDescription", name + "'s '" + command + "' command timeout.")
	};
	return "";
}

string getVersion()
{
	return "UKAJONG/0.2";
}

//******************************************************************************
// 表示
//******************************************************************************
string showBalloon()
{
	if (isLockedDoubleClick)
		return "";
	isLockedSingleClick = 0;//緊急避難的解除
	string s = "\0\_q";
	string shellName = _systemdict["OnNotifySelfInfo"]["Reference3"];
	string balloonName = _systemdict["OnNotifySelfInfo"]["Reference5"];
	if (shellName == "standard" && balloonName == "雀卓用透明バルーン")
	{
		modeEx = 1;
		s += "\![lock,balloonmove]";
	}
	else
	{
		modeEx = 0;
		s += "\![unlock,balloonmove]";
	}
	//接続確認
	if (_aryvn(playerName) < 3)
	{
		if (modeEx)
		{
			s += "\_l[300,300]\![*]\__q[Menu_SearchPlayer]対局相手を探す\__q\n";
			s += "\_l[300,]\![*]\__q[Menu_StartWithoutPlayer]対局相手無しで始める\__q\n\n";
			s += "\_l[300,]\![*]\__q[Menu_CANSEL]閉じる\__q\_q\e";
		}
		else
		{
			s += "\![*]\__q[Menu_SearchPlayer]対局相手を探す\__q\n";
			s += "\![*]\__q[Menu_StartWithoutPlayer]対局相手無しで始める\__q\n\n";
			s += "\![*]\__q[Menu_CANSEL]閉じる\__q\_q\e";
		}
		return s;
	}
	//gamestart通知
	if (!isGameStarted)
	{
		isGameStarted = 1;
		bafu = 0;
		kyoku = 1;
		oyaIndex = _randselect({0, 1, 2, 3});
		array seki = {"東", "南", "西", "北"};
		dict dSeki;
		array pNames;
		for (int i = 0; playerName[i] != nil; i++)
		{
			pNames += playerName[(i + oyaIndex) % 4];
		}
		for (int i = 0; pNames[i] != nil; i++)
		{
			dSeki += $(pNames[i], seki[i]);
		}
		string s;
		s += "\0";
		for (int i = 0; i < 3; i++)
		{
			s += "\![raiseother," + playerName[i] + ",OnMahjong," + getVersion()
				+ ",gamestart," + dSeki[playerName[i]] + "," + pNames[0] + "," + pNames[1] + "," + pNames[2] + "," + pNames[3] + "]";
		}
		s += "\_w[2000]\![raise,showBalloon]\e";
		return s;
	}
	if (nYamaIndex > 0)
		return lastScript;
	else
		return startKyoku();
}

string Menu_SearchPlayer(dict ref)
{
	isSoloMode = 0;
	return "\![raiseother,__SYSTEM_ALL_GHOST__,OnMahjong," + getVersion() + ",hello]";
}
string Menu_StartWithoutPlayer(dict ref)
{
	isSoloMode = 1;
	playerName = {"エミリ", "テディ", "エミリオ", "user"};
	isGameStarted = 1;
	bafu = 0;
	kyoku = 1;
	oyaIndex = _randselect({0, 1, 2, 3});
	return startKyoku();
}

string Menu_StartKyoku(dict ref)
{
	if (bafu < 2)//東場、南場
		return startKyoku();
	else
		return Menu_EndGame(ref);
}

string Menu_EndGame(dict ref)
{
	string s = "\0\s[0]";
	//gameend通知
	s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion() + ",gameend";
	for (int i = 0; playerName[i] != nil; i++)
	{
		s += "," + playerName[i] + _bytechar(1) + arScore[i];
	}
	s += "]\e";
	isGameStarted = 0;
	playerName = {};
	arScore = {25000, 25000, 25000, 25000};
	tsumibou = 0;
	kyotaku = 0;
	isLockedSingleClick = 0;
	isLockedDoubleClick = 0;
	clearStatus();
	return s;
}

string startKyoku()
{
	arYama = shuffleArray(getAllHai());
	arTehai[0] = _arystr(sortHai(getArrayRange(arYama, 0, 12)));
	arTehai[1] = _arystr(sortHai(getArrayRange(arYama, 13, 25)));
	arTehai[2] = _arystr(sortHai(getArrayRange(arYama, 26, 38)));
	arTehai[3] = _arystr(sortHai(getArrayRange(arYama, 39, 51)));
	arKawa = {{}, {}, {}, {}};
	arFuritenCheckRichi = {{}, {}, {}, {}};
	arFuritenCheckTurn = {{}, {}, {}, {}};
	arRichiJunme = {-1, -1, -1, -1};
	arFuroJunme = {{}, {}, {}, {}};
	arFuroHistory = {{}, {}, {}, {}};
	arKakanHistory = {{}, {}, {}, {}};
	isRinshanChance = 0;
	arIppatsuChance = {0, 0, 0, 0};
	arChihouChance = {1, 1, 1, 1};
	arWRichi = {0, 0, 0, 0};
	dorahyouji = arYama[52];
	nYamaIndex = 66;//王牌14枚(from 52 to 65)抜く
	reservedNaku = ${
		$(playerName[0], {}),
		$(playerName[1], {}),
		$(playerName[2], {}),
		$(playerName[3], {})
	};
	reservedTenpai = ${
		$(playerName[0], ""),
		$(playerName[1], ""),
		$(playerName[2], "")
	};
	dResponseNeed = ${
		$(playerName[0], ""),
		$(playerName[1], ""),
		$(playerName[2], "")
	};
	string tsumo = arYama[nYamaIndex++];
	string s;
	//kyokustart通知
	s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
		+ ",kyokustart," + arBafu[bafu] + "," + playerName[oyaIndex] + "," + tsumibou + "," + kyotaku + "]";
	//haipai通知
	for (int i = 0; i < 3; i++)
	{
		s += "\![raiseother," + playerName[i] + ",OnMahjong," + getVersion()
			+ ",haipai," + playerName[i] + "," + arTehai[i] + "]";
	}
	//dora通知
	s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
		+ ",dora," + dorahyouji + "]";
	//userがツモ
	if (oyaIndex == 3)
	{
		isLockedSingleClick = 0;
		isLockedDoubleClick = 0;
		s += "\![set,balloontimeout,0]\![set,choicetimeout,0]\0\b[2]\_q";
		s += showStatus(tsumo, "", oyaIndex, -1, {0, 0, 0}, 0);
		s += "\_q\e";
		lastScript = s;
		return s;
	}
	//user以外がツモ
	isLockedSingleClick = 1;
	isLockedDoubleClick = 1;
	s += "\![set,balloontimeout,0]\0\b[2]\_q";
	s += showStatus(tsumo, "", oyaIndex, -1, {0, 0, 0}, 0);
	s += "\_q";
	s += "\![raiseother," + playerName[oyaIndex] + ",OnMahjong," + getVersion()
		+ ",tsumo," + playerName[oyaIndex] + "," + getLeftYama() + "," + tsumo + "]";
	s += "\![raiseother," + playerName[oyaIndex] + ",OnMahjong," + getVersion()
		+ ",sutehai?]";
	s += "\![notify,OnNotifyPrepareSuteSelect," + oyaIndex + "," + tsumo + "]";
	s += "\e";
	dResponseNeed[playerName[oyaIndex]] = "sutehai?";
	isRecievedResponse = 0;
	return s;
}

int getLeftYama()
{
	return _aryvn(arYama) - nYamaIndex;
}

//東家を先頭にしてリーチ済の他家の現物を返す
array getGenbutsu(int p)
{
	array r;
	int findOya = 0;
	int i = 0;
	while (_aryvn(r) < 4)
	{
		if (i == oyaIndex)
			findOya = 1;
		if (findOya)
		{
			if (i != p && _aryvn(arFuritenCheckRichi[i]) > 0)
				r += JOIN(sortHai(uniq(strHaiToArray(JOIN(arKawa[i], "") + JOIN(arFuritenCheckRichi[i], "")))), "");
			else
				r += "";
		}
		i = (i + 1) % 4;
	}
	return r;
}

string OnSuteSelect(dict ref)
{
	int selectPlayer = ref["Reference0"];
	string tsumo = ref["Reference1"];
	string s = "\C\![lock,balloonrepaint]\![lock,repaint]\c\![set,balloontimeout,0]\![set,choicetimeout,0]\0\b[2]\_q";
	string sute;
	string tehai = addHai(arTehai[selectPlayer], tsumo);
	string wait = "";
	//要求されたアクションが可能かチェック
	string action;
	string selectedHai;
	string errorMessage;
	if (reservedTsumo)
	{
		if (canTsumo(selectPlayer, tsumo))
			action = "tsumo";
		else
			errorMessage = "failed requested action 'tsumo' with " + arTehai[selectPlayer] + " " + tsumo + " from " + playerName[selectPlayer];
	}
	else if (reservedRichi)
	{
		if (canRichi(selectPlayer, tsumo))
			action = "richi";
		else
			errorMessage = "failed requested action 'richi' with " + reservedSelectedHai + " from " + playerName[selectPlayer] + " [" + tehai + "]";
	}
	else if (reservedAnkan)
	{
		if (canAnkan(selectPlayer, tsumo) && (arRichiJunme[selectPlayer] == -1 || arRichiJunme[selectPlayer] >= 0 && tsumo == reservedSelectedHai))
			action = "ankan";
		else
			errorMessage = "failed requested action 'ankan' with " + reservedSelectedHai + " from " + playerName[selectPlayer] + " [" + tehai + "]";
	}
	else if (reservedKakan)
	{
		if (canKakan(selectPlayer, tsumo))
			action = "kakan";
		else
			errorMessage = "failed requested action 'kakan' with " + reservedSelectedHai + " from " + playerName[selectPlayer] + " [" + tehai + "]";
	}
	if (reservedSelectedHai != "")
		selectedHai = reservedSelectedHai;
	reservedTsumo = 0;
	reservedRichi = 0;
	reservedAnkan = 0;
	reservedKakan = 0;
	reservedSelectedHai = "";
	if (errorMessage != "")
	{
		//指定されたアクションが不可能だった
		dAdditionalHeader = ${
			$("ErrorLevel", "warning"),
			$("ErrorDescription", errorMessage)
		};
	}
	if (action == "" && selectedHai == "" && selectPlayer != 3)//auto
	{
		if (tsumo == "")//カン以外の副露直後
		{
			selectedHai = naniwokiru(tehai, arKawa[selectPlayer], getBafuHai(), getJifuHai(selectPlayer), dorahyouji, getGenbutsu(selectPlayer));
		}
		else
		{
			if (canTsumo(selectPlayer, tsumo))
			{
				action = "tsumo";
			}
			else if (shouldAnkan(selectPlayer, tsumo))
			{
				action = "ankan";
				array arAnkanHaiUseful = getAnkanHaiUseful(tehai, selectPlayer);
				string ankanHai = _randselect(arAnkanHaiUseful);
				if (arRichiJunme[selectPlayer] >= 0)
					ankanHai = tsumo;
				selectedHai = ankanHai;
			}
			else if (shouldKakan(selectPlayer, tsumo))
			{
				action = "kakan";
				array arKakanHaiUseful = getKakanHaiUseful(tehai, selectPlayer);
				string kakanHai = _randselect(arKakanHaiUseful);
				selectedHai = kakanHai;
			}
			else if (shouldRichi(selectPlayer, tsumo))
			{
				action = "richi";
				selectedHai = naniwokiru(tehai, arKawa[selectPlayer], getBafuHai(), getJifuHai(selectPlayer), dorahyouji, getGenbutsu(selectPlayer));
			}
			else
			{
				if (arRichiJunme[selectPlayer] >= 0)
					selectedHai = tsumo;
				else
					selectedHai = naniwokiru(tehai, arKawa[selectPlayer], getBafuHai(), getJifuHai(selectPlayer), dorahyouji, getGenbutsu(selectPlayer));
			}
		}
	}
	//予定されたアクションの実行
	if (action == "tsumo")
	{
		s += showStatus(tsumo, "", selectPlayer, selectPlayer, {0, 0, 0}, 0);
		//発声通知
		s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",say," + playerName[selectPlayer] + ",tsumo]";
		string si;
		string animNo;
		animNo = "500001";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		animNo = "500199";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		arSavedWordCommand += {"Menu_NextTurn"};
		s += si;
		s += "\![unlock,balloonrepaint]\![unlock,repaint]";
		s += "\x\![raise,OnTsumoScore," + selectPlayer + "]";
		s += "\e";
		isLockedSingleClick = 0;
		reservedClickScript = "\![raise,OnTsumoScore," + selectPlayer + "]";
		return s;
	}
	else if (action == "ankan")
	{
		string ankanHai = selectedHai;
		arTehai[selectPlayer] = tehai;
		isRinshanChance = 1;
		setAnkan(selectPlayer, ankanHai);
		string strDorahyoujiNew = arYama[52 + (_strlen(dorahyouji) / 2)];
		dorahyouji += strDorahyoujiNew;
		tsumo = arYama[nYamaIndex++];
		s += showStatus(tsumo, "", selectPlayer, -1, {0, 0, 0}, 0);
		string sr;
		//発声通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",say," + playerName[selectPlayer] + ",kan]";
		sr += "\_w[2000]";
		//晒した牌通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",open," + playerName[selectPlayer] + "," + ankanHai + ankanHai + ankanHai + ankanHai + "]";
		//ツモ通知
		if (selectPlayer != 3)
			sr += "\![raiseother," + playerName[selectPlayer] + ",OnMahjong," + getVersion()
				+ ",tsumo," + playerName[selectPlayer] + "," + getLeftYama() + "," + tsumo + "]";
		//dora通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",dora," + strDorahyoujiNew + "]";
		//捨て牌問い合わせ
		if (selectPlayer != 3)
		{
			sr += "\![raiseother," + playerName[selectPlayer] + ",OnMahjong," + getVersion()
				+ ",sutehai?]";
			dResponseNeed[playerName[selectPlayer]] = "sutehai?";
			isRecievedResponse = 0;
		}
		s += "\_q";
		s += "\![unlock,balloonrepaint]\![unlock,repaint]";
		if (selectPlayer == 3)
		{
			lastScript = s + "\e";
		}
		else
		{
			s += "\![notify,OnNotifyPrepareSuteSelect," + selectPlayer + "," + tsumo + "]";
		}
		return s + sr + "\e";
	}
	else if (action == "kakan")
	{
		string kakanHai = selectedHai;
		arTehai[selectPlayer] = tehai;
		isRinshanChance = 1;
		setKakan(selectPlayer, kakanHai);
		string sr;
		//発声通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",say," + playerName[selectPlayer] + ",kan]";
		sr += "\_w[2000]";
		//晒した牌通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",open," + playerName[selectPlayer] + "," + kakanHai + "]";
		//この時点でロン(槍槓)を受け付ける必要がある
//		s += showStatus("", kakanHai, selectPlayer, -1, {0, 0, 0}, 1, 1);
//		if (selectPlayer != 3)
//		{
//			if (canRon(3, kakanHai))
//			{
//				s += "\![unlock,balloonrepaint]\![unlock,repaint]";
//				s += sr + "\x\0\b[2]";
//				sr = "";
//				isLockedSingleClick = 0;
//			}
//			else
//			{
//				isLockedSingleClick = 1;
//			}
//		}
		isRecievedResponse = 1;
		string rcs = "";
		for (int i = 0; i < 3; i++)
		{
			if (i != selectPlayer)
			{
				if (canRon(i, kakanHai))
				{
					rcs += "\![raiseother," + playerName[i] + ",OnMahjong," + getVersion()
						+ ",naku?," + kakanHai + ",ron]";
					dResponseNeed[playerName[i]] = "naku?";
					isRecievedResponse = 0;
				}
			}
		}
		if (rcs != "")
		{
			rcs += "\![notify,OnNotifyPrepareSuteComplete," + selectPlayer + "," + kakanHai + "]";
			reservedClickScript = rcs;
			s += showStatus("", kakanHai, selectPlayer, -1, {0, 0, 0}, 1, 1);
			s += rcs + "\_q";
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			return s + sr + "\e";//ロンされなかったらどうしよう
		}
		string strDorahyoujiNew = arYama[52 + (_strlen(dorahyouji) / 2)];
		dorahyouji += strDorahyoujiNew;
		tsumo = arYama[nYamaIndex++];
		rcs += showStatus(tsumo, "", selectPlayer, -1, {0, 0, 0}, 1);
		//ツモ通知
		if (selectPlayer != 3)
			sr += "\![raiseother," + playerName[selectPlayer] + ",OnMahjong," + getVersion()
				+ ",tsumo," + playerName[selectPlayer] + "," + getLeftYama() + "," + tsumo + "]";
		//捨て牌問い合わせ
		if (selectPlayer != 3)
		{
			sr += "\![raiseother," + playerName[selectPlayer] + ",OnMahjong," + getVersion()
				+ ",sutehai?]";
			dResponseNeed[playerName[selectPlayer]] = "sutehai?";
			isRecievedResponse = 0;
		}
		//dora通知
		sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",dora," + strDorahyoujiNew + "]";
		rcs += "\_q";
		rcs += "\![unlock,balloonrepaint]\![unlock,repaint]";
		if (selectPlayer == 3)
		{
			lastScript = s + rcs + "\e";
		}
		else
		{
			rcs += "\![notify,OnNotifyPrepareSuteSelect," + selectPlayer + "," + tsumo + "]";
			reservedClickScript = rcs + sr;
		}
		return s + rcs + sr + "\e";
	}
	else if (action == "richi")
	{
		sute = selectedHai;
		arRichiJunme[selectPlayer] = _aryvn(arKawa[selectPlayer]);
		//発声通知
		s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
			+ ",say," + playerName[selectPlayer] + ",richi]";
		wait += "\_w[2000]";
	}
	else
	{
		sute = selectedHai;
	}
	isRinshanChance = 0;
	setSutehai(sute, selectPlayer);
	arTehai[selectPlayer] = removeHai(tehai, sute);
	s += showStatus("", sute, selectPlayer, -1, {0, 0, 0}, 0);
	//捨て牌通知
	s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
		+ ",sutehai," + playerName[selectPlayer] + "," + sute + "]";
	//userが鳴く、ロンするのが可能な場合、\xを挟んで一時停止する canPonはcanDaiminkanを兼ねる
	if (selectPlayer != 3)
	{
		if (canRon(3, sute) || canPon(3, sute) || (selectPlayer + 1 == 3) && canChi(3, sute))
		{
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			s += "\x[noclear]";
			isLockedSingleClick = 0;
		}
		else
		{
			isLockedSingleClick = 1;
		}
	}
	isRecievedResponse = 1;
	string rcs = "";
	for (int i = 0; i < 3; i++)
	{
		if (i != selectPlayer)
		{
			array command = {};
			if (canRon(i, sute))
				command += "ron";
			if (canPon(i, sute))
				command += "pon";
			if ((selectPlayer + 1) % 4 == i && canChi(i, sute))
				command += "chi";
			if (canDaiminkan(i, sute))
				command += "kan";
			if (_aryvn(command) > 0)
			{
				//鳴くか問い合わせ
				rcs += "\![raiseother," + playerName[i] + ",OnMahjong," + getVersion()
					+ ",naku?," + sute + "," + JOIN(command, ",") + "]";
				dResponseNeed[playerName[i]] = "naku?";
				isRecievedResponse = 0;
			}
		}
	}
	rcs += "\![notify,OnNotifyPrepareSuteComplete," + selectPlayer + "," + sute + "]";
	reservedClickScript = rcs;
	s += rcs + "\_q";
	s += "\![unlock,balloonrepaint]\![unlock,repaint]";
	s += "\e";
	return s;
}

string OnNotifyPrepareSuteSelect(dict ref)
{
	int selectPlayer = ref["Reference0"];
	string tsumo = ref["Reference1"];
	reservedScript = "\C\![raise,OnSuteSelect," + selectPlayer + "," + tsumo + "]";
	_create_thread("TH_WaitResponse");
	return "";
}

string OnNotifyPrepareSuteComplete(dict ref)
{
	int selectPlayer = ref["Reference0"];
	string sute = ref["Reference1"];
	reservedScript = "\C\![raise,OnSuteComplete," + selectPlayer + "," + sute + "]";
	_create_thread("TH_WaitResponse");
	return "";
}

string OnSuteComplete(dict ref)
{
	int completePlayer = ref["Reference0"];
	string sute = ref["Reference1"];
	string s = "\C\![lock,balloonrepaint]\![lock,repaint]\c\![set,balloontimeout,0]\![set,choicetimeout,0]\0\b[2]\_q";
	dict reservedNakuCopy;
	reservedNakuCopy = ${
		$(playerName[0], {}),
		$(playerName[1], {}),
		$(playerName[2], {}),
		$(playerName[3], {})
	};
	for (int i = 0; i <= 3; i++)
	{
		string action = reservedNaku[playerName[i]][0];
		if (action != "")
			reservedNakuCopy[playerName[i]] = reservedNaku[playerName[i]];
	}
	reservedNaku = ${
		$(playerName[0], {}),
		$(playerName[1], {}),
		$(playerName[2], {}),
		$(playerName[3], {})
	};
	//レスポンスが無かったプレイヤーの行動の補完
	array arActionPlayer = {};
	for (int i = 1; i <= 3; i++)
	{
		int index = (i + completePlayer) % 4;
		arActionPlayer += index;
	}
	for (int x = 0; arActionPlayer[x] != nil; x++)
	{
		int i = arActionPlayer[x];
		string action = reservedNakuCopy[playerName[i]][0];
		if (action == "" && i != 3)
		{
			if (canRon(i, sute))
			{
				reservedNakuCopy[playerName[i]] = {"ron"};
			}
			else if (shouldPon(i, sute))
			{
				reservedNakuCopy[playerName[i]] = {"pon"};
			}
			else if ((completePlayer + 1) % 4 == i && shouldChi(i, sute))
			{
				array a = getChiMaterialBest(i, sute);
				reservedNakuCopy[playerName[i]] = {"chi", a[0], a[1]};
			}
			else if (shouldDaiminkan(i, sute))
			{
				reservedNakuCopy[playerName[i]] = {"kan"};
			}
		}
	}
	//副露の優先順位を考慮
	int p = -1;
	int isTripleRon = 0;
	if (reservedNakuCopy[playerName[arActionPlayer[0]]][0] == "ron"
		&& reservedNakuCopy[playerName[arActionPlayer[1]]][0] == "ron"
		&& reservedNakuCopy[playerName[arActionPlayer[2]]][0] == "ron")
	{
		isTripleRon = 1;
	}
	else
	{
		array arActions = {"ron", "pon", "kan", "chi"};
		for (int j = 0; arActions[j] != nil; j++)
		{
			for (int x = 0; arActionPlayer[x] != nil; x++)
			{
				int i = arActionPlayer[x];
				string action = reservedNakuCopy[playerName[i]][0];
				if (p >= 0 && p != i && action != "")
					reservedNakuCopy[playerName[i]] = {};//優先順位の低いアクションは全てキャンセルする
				else if (action == arActions[j])
					p = i;
			}
		}
	}
	//予定されたアクションの実行
	if (p >= 0)
	{
		string action = reservedNakuCopy[playerName[p]][0];
		if (action == "ron")
		{
			s += showStatus("", sute, completePlayer, p, {0, 0, 0}, 0);
			//発声通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[p] + ",ron]";
			string si;
			string animNo;
			animNo = "500001";
			si += "\![anim,offset," + animNo + ",0,0]";
			si += "\i[" + animNo + "]";
			arSavedTehai[3] += animNo;
			animNo = "500199";
			si += "\![anim,offset," + animNo + ",0,0]";
			si += "\i[" + animNo + "]";
			arSavedTehai[3] += animNo;
			arSavedWordCommand += {"Menu_NextTurn"};
			s += si;
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			s += "\x\![raise,OnRonScore," + p + "," + completePlayer + "," + sute + "]";
			s += "\e";
			isLockedSingleClick = 0;
			reservedClickScript = "\![raise,OnRonScore," + p + "," + completePlayer + "," + sute + "]";
			return s;
		}
		if (action == "pon")
		{
			setKyotaku(completePlayer);
			setFuro(p, completePlayer, sute, sute + sute);
			s += showStatus("", "", p, -1, {0, 0, 0}, 1);
			//発声通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[p] + ",pon]";
			s += "\_w[2000]";
			//晒した牌通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",open," + playerName[p] + "," + sute + sute + sute + "]";
			//捨て牌問い合わせ
			if (p != 3)
			{
				s += "\![raiseother," + playerName[p] + ",OnMahjong," + getVersion()
					+ ",sutehai?]";
				s += "\![notify,OnNotifyPrepareSuteSelect," + p + ",]";
				dResponseNeed[playerName[p]] = "sutehai?";
				isRecievedResponse = 0;
			}
			else
			{
				isLockedSingleClick = 0;
			}
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			s += "\e";
			return s;
		}
		if (action == "chi")
		{
			string hai1 = reservedNakuCopy[playerName[p]][1];
			string hai2 = reservedNakuCopy[playerName[p]][2];
			string furoHai = _arystr(sortHai(strHaiToArray(sute + hai1 + hai2)));
			setKyotaku(completePlayer);
			setFuro(p, completePlayer, sute, hai1 + hai2);
			s += showStatus("", "", p, -1, {0, 0, 0}, 1);
			//発声通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[p] + ",chi]";
			s += "\_w[2000]";
			//晒した牌通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",open," + playerName[p] + "," + furoHai + "]";
			//捨て牌問い合わせ
			if (p != 3)
			{
				s += "\![raiseother," + playerName[p] + ",OnMahjong," + getVersion()
					+ ",sutehai?]";
				s += "\![notify,OnNotifyPrepareSuteSelect," + p + ",]";
				dResponseNeed[playerName[p]] = "sutehai?";
				isRecievedResponse = 0;
			}
			else
			{
				isLockedSingleClick = 0;
			}
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			s += "\e";
			return s;
		}
		if (action == "kan")
		{
			isRinshanChance = 1;
			setKyotaku(completePlayer);
			setFuro(p, completePlayer, sute, sute + sute + sute);
			string strDorahyoujiNew = arYama[52 + (_strlen(dorahyouji) / 2)];
			dorahyouji += strDorahyoujiNew;
			string tsumo = arYama[nYamaIndex++];
			s += showStatus(tsumo, "", p, -1, {0, 0, 0}, 1);
			//発声通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[p] + ",kan]";
			s += "\_w[2000]";
			//晒した牌通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",open," + playerName[p] + "," + sute + sute + sute + sute + "]";
			if (p != 3)
			{
				//ツモ通知
				s += "\![raiseother," + playerName[p] + ",OnMahjong," + getVersion()
					+ ",tsumo," + playerName[p] + "," + getLeftYama() + "," + tsumo + "]";
				//捨て牌問い合わせ
				s += "\![raiseother," + playerName[p] + ",OnMahjong," + getVersion()
					+ ",sutehai?]";
				s += "\![notify,OnNotifyPrepareSuteSelect," + p + "," + tsumo + "]";
				dResponseNeed[playerName[p]] = "sutehai?";
				isRecievedResponse = 0;
			}
			else
			{
				isLockedSingleClick = 0;
			}
			//dora通知
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",dora," + strDorahyoujiNew + "]";
			s += "\_q";
			s += "\![unlock,balloonrepaint]\![unlock,repaint]";
			s += "\e";
			return s;
		}
	}
	string reason = "";
	//四風子連打
	if (nYamaIndex == 70 && arChihouChance[completePlayer] == 1)
	{
		if (
			(sute == "1z" || sute == "2z" || sute == "3z" || sute == "4z")
			&& (arKawa[0][0] == arKawa[1][0] && arKawa[0][0] == arKawa[2][0] && arKawa[0][0] == arKawa[3][0])
		)
			reason = "4renda";
	}
	//四開槓
	if (countKantsu(completePlayer) > 0)
	{
		if (countKantsu(0) + countKantsu(1) + countKantsu(2) + countKantsu(3) == 4 && countKantsu(completePlayer) != 4)
			reason = "4kan";
	}
	//四家立直
	if (arRichiJunme[0] >= 0 && arRichiJunme[1] >= 0 && arRichiJunme[2] >= 0 && arRichiJunme[3] >= 0)
	{
		reason = "4richi";
	}
	//三家和
	if (isTripleRon)
	{
		reason = "3ron";
		//発声通知
		for (int x = 0; x < 3; x++)
		{
			s += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[arActionPlayer[x]] + ",ron]";
		}
	}
	//途中流局
	if (reason != "")
	{
		array arTenpaiPlayerFlag = {0, 0, 0};
		if (reason == "3ron")
		{
			arTenpaiPlayerFlag = {1, 1, 1, 1};
			arTenpaiPlayerFlag[completePlayer] = 0;
		}
		else if (reason == "4richi")
		{
			setKyotaku(completePlayer);
		}
		isLockedSingleClick = 0;
		s += showStatus("", "", -1, -1, arTenpaiPlayerFlag, 0);
		string si;
		string animNo;
		animNo = "500001";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		animNo = "500199";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		arSavedWordCommand += {"Menu_NextTurn"};
		s += si;
		s += "\![unlock,balloonrepaint]\![unlock,repaint]";
		s += "\x[noclear]";
		string rcs = "";
		rcs += "\![raise,OnRyukyokuScore," + reason + "," + _arystr(arTenpaiPlayerFlag) + "]";
		reservedClickScript = rcs;
		s += rcs + "\_q\e";
		return s;
	}
	//流局(荒牌平局)
	if (_aryvn(arYama) == nYamaIndex)
	{
		isLockedSingleClick = 0;
		s += showStatus("", "", -1, -1, {0, 0, 0}, 0);
		string si;
		string animNo;
		animNo = "500001";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		animNo = "500199";
		si += "\![anim,offset," + animNo + ",0,0]";
		si += "\i[" + animNo + "]";
		arSavedTehai[3] += animNo;
		arSavedWordCommand += {"Menu_NextTurn"};
		s += si;
		s += "\![unlock,balloonrepaint]\![unlock,repaint]";
		s += "\x[noclear]";
		string rcs = "";
		//流し満貫判定
		string strYaochu = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
		for (int i = 0; i < 4; i++)
		{
			if (_aryvn(arFuroJunme[i]) == 0)//鳴かれてない
			{
				int isNagashimangan = 1;
				for (int j = 0; arKawa[i][j] != nil; j++)
				{
					if (_strstr(strYaochu, arKawa[i][j], 0) == -1)
					{
						isNagashimangan = 0;
						break;
					}
				}
				if (isNagashimangan)
				{
					rcs += "\![notify,OnNotifyPrepareRyukyoku,nagashimangan," + i + "]";
					reservedClickScript = rcs;
					s += rcs + "\_q\e";
					return s;
				}
			}
		}
		//テンパイ判定
		isRecievedResponse = 1;
		for (int i = 0; i < 3; i++)
		{
			int shanten = getShanten(arTehai[i]);
			if (shanten == 0)
			{
				reservedTenpai[playerName[i]] = "yes";//デフォルトでyes
				//テンパイ宣言問い合わせ
				rcs += "\![raiseother," + playerName[i] + ",OnMahjong," + getVersion()
					+ ",tenpai?]";
				dResponseNeed[playerName[i]] = "tenpai?";
				isRecievedResponse = 0;
			}
		}
		rcs += "\![notify,OnNotifyPrepareRyukyoku,kouhai]";
		reservedClickScript = rcs;
		s += rcs + "\_q\e";
		return s;
	}
	setKyotaku(completePlayer);
	int nextPlayer = (completePlayer + 1) % 4;
	string tsumo;
	//userがツモ
	if (nextPlayer == 3)
	{
		isLockedSingleClick = 0;
		isLockedDoubleClick = 0;
		tsumo = arYama[nYamaIndex++];
		s += showStatus(tsumo, "", 3, -1, {0, 0, 0}, 0);
		s += "\_q";
		s += "\![unlock,balloonrepaint]\![unlock,repaint]";
		s += "\e";
		lastScript = s;
		return s;
	}
	//user以外がツモ
	isLockedSingleClick = 1;
	isLockedDoubleClick = 1;
	tsumo = arYama[nYamaIndex++];
	s += showStatus(tsumo, "", nextPlayer, -1, {0, 0, 0}, 0);
	//ツモ通知
	s += "\![raiseother," + playerName[nextPlayer] + ",OnMahjong," + getVersion()
		+ ",tsumo," + playerName[nextPlayer] + "," + getLeftYama() + "," + tsumo + "]";
	//捨て牌問い合わせ
	s += "\![raiseother," + playerName[nextPlayer] + ",OnMahjong," + getVersion()
		+ ",sutehai?]";
	s += "\_q";
	s += "\![unlock,balloonrepaint]\![unlock,repaint]";
	s += "\![notify,OnNotifyPrepareSuteSelect," + nextPlayer + "," + tsumo + "]";
	s += "\e";
	dResponseNeed[playerName[nextPlayer]] = "sutehai?";
	isRecievedResponse = 0;
	return s;
}

int countKantsu(int nPlayer)
{
	int count = 0;
	array arHai = strHaiToArrayWithFuro(arTehai[nPlayer]);
	for (int i = 0; arHai[i] != nil; i++)
	{
		if (arHai[i][0] == "furo" && _strlen(arHai[i][1]) == 8)
			count++;
		else if (arHai[i][0] == "ankan")
			count++;
	}
	return count;
}

setKyotaku(int nPlayer)
{
	if (arRichiJunme[nPlayer] == _aryvn(arKawa[nPlayer]) - 1)
	{
		kyotaku++;
		arScore[nPlayer] -= 1000;
		arIppatsuChance[nPlayer] = 1;
		if (arChihouChance[nPlayer])
			arWRichi[nPlayer] = 1;
	}
	else
	{
		arIppatsuChance[nPlayer] = 0;
	}
	arChihouChance[nPlayer] = 0;
}

string OnNotifyPrepareRyukyoku(dict ref)
{
	reservedScript = "\C\0\b[2]\![raise,OnRyukyoku," + ref["Reference0"] + "," + ref["Reference1"] + "]";
	_create_thread("TH_WaitResponse");
	return "";
}

string OnRyukyoku(dict ref)
{
	string reason = ref["Reference0"];
	if (reason == "nagashimangan")
		return "\![raise,OnRyukyokuScore," + reason + "," + ref["Reference1"] + "]\e";
	if (reason != "kouhai")
		return "\![raise,OnRyukyokuScore," + reason + "]\e";
	string m;
	array arTenpaiPlayerFlag = {0, 0, 0};
	for (int i = 0; i < 3; i++)
	{
		string action = reservedTenpai[playerName[i]];
		if (action == "yes")
		{
			arTenpaiPlayerFlag[i] = 1;
			m += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[i] + ",tenpai]";
			m += "\_w[1000]";
		}
		else
		{
			arTenpaiPlayerFlag[i] = 0;
			m += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
				+ ",say," + playerName[i] + ",noten]";
			m += "\_w[1000]";
		}
	}
	int shanten = getShanten(arTehai[3]);
	if (shanten == 0)
		arTenpaiPlayerFlag += 1;
	else
		arTenpaiPlayerFlag += 0;
	string s = "\![set,balloontimeout,0]\0\b[2]\_q";
	s += showStatus("", "", -1, -1, arTenpaiPlayerFlag, 0);
	s += m;
	string si;
	string animNo;
	animNo = "500001";
	si += "\![anim,offset," + animNo + ",0,0]";
	si += "\i[" + animNo + "]";
	arSavedTehai[3] += animNo;
	animNo = "500199";
	si += "\![anim,offset," + animNo + ",0,0]";
	si += "\i[" + animNo + "]";
	arSavedTehai[3] += animNo;
	arSavedWordCommand += {"Menu_NextTurn"};
	s += si;
	s += "\x\![raise,OnRyukyokuScore," + reason + "," + _arystr(arTenpaiPlayerFlag) + "]";
	s += "\e";
	isLockedSingleClick = 0;
	reservedClickScript = "\![raise,OnRyukyokuScore," + reason + "," + _arystr(arTenpaiPlayerFlag) + "]";
	return s;
}

setSutehai(string sute, int nPlayer)
{
	arKawa[nPlayer] += sute;
	for (int i = 0; i < 4; i++)
	{
		if (arRichiJunme[i] >= 0)
			arFuritenCheckRichi[i] += sute;
		if (nPlayer == i)
			arFuritenCheckTurn[i] = {};
		else
			arFuritenCheckTurn[i] += sute;
	}
}

string click_p01(dict ref) { return getSutehaiFromClick(ref); }
string click_p02(dict ref) { return getSutehaiFromClick(ref); }
string click_p03(dict ref) { return getSutehaiFromClick(ref); }
string click_p04(dict ref) { return getSutehaiFromClick(ref); }
string click_p05(dict ref) { return getSutehaiFromClick(ref); }
string click_p06(dict ref) { return getSutehaiFromClick(ref); }
string click_p07(dict ref) { return getSutehaiFromClick(ref); }
string click_p08(dict ref) { return getSutehaiFromClick(ref); }
string click_p09(dict ref) { return getSutehaiFromClick(ref); }
string click_p10(dict ref) { return getSutehaiFromClick(ref); }
string click_p11(dict ref) { return getSutehaiFromClick(ref); }
string click_p12(dict ref) { return getSutehaiFromClick(ref); }
string click_p13(dict ref) { return getSutehaiFromClick(ref); }
string click_p14(dict ref) { return getSutehaiFromClick(ref); }
string getSutehaiFromClick(dict ref)
{
	if (isLockedSingleClick)
		return "";
	isLockedSingleClick = 1;
	isLockedDoubleClick = 1;
	int i = (int)_substr(ref["Reference4"], 1, 2);
	string sute;
	string tsumo = savedTsumo;
	savedTsumo = "";
	if (i <= 13)
		sute = _substr(arTehai[3], 2 * (i - 1), 2);
	else
		sute = tsumo;
	string animNo;
	string si;
	animNo = "40" + fillzero(i) + getSurfaceCode(sute);
	si += "\![anim,clear," + animNo + "]";
	animNo = "40" + fillzero(i) + "99";
	si += "\![anim,clear," + animNo + "]";
	string s = "\![raise,OnChoiceSelectEx,,Menu_Sutehai," + sute + "," + tsumo + "]";
	return "\C\![lock,balloonrepaint]\![lock,repaint]\0\b[2]" + si + s + "\![unlock,balloonrepaint]\![unlock,repaint]\e";
}

string Menu_Sutehai(dict ref)
{
	isLockedSingleClick = 1;
	isLockedDoubleClick = 1;
	int selectPlayer = 3;
	string sute = ref["Reference2"];
	string tsumo = ref["Reference3"];
	reservedSelectedHai = sute;
	return "\C\0\b[2]\![raise,OnSuteSelect," + selectPlayer + "," + tsumo + "]\e";
}

string clearAnimation()
{
	string si;
	for (int p = 0; p <= 3; p++)
	{
		for (int i = 0; arSavedTehai[p][i] != nil; i++)
		{
			si += "\![anim,clear," + arSavedTehai[p][i] + "]";
		}
		arSavedTehai[p] = {};
	}
	for (int i = 0; i < 14; i++)
	{
		si += "\![anim,clear,40" + fillzero(i + 1) + "99]";
	}
	return si;
}

string showStatus(string tsumo, string sute, int nPlayer, int agariPlayer, array arTenpaiPlayerFlag, int isFuro, int isKakan)
{
	string s = "";
	string si = "";
	string siInfo = "";
	string sClear = clearAnimation();
	array savedTehai = {};
	string animNo;
	int offset = 0;
	array wanpai;
	array arDorahyouji = strHaiToArray(dorahyouji);
	int isMinkan = 0;
	if (isFuro && tsumo != "")
		isMinkan = 1;
	for (int i = 0; i < 5; i++)
	{
		if (arDorahyouji[i] == nil)
		{
			wanpai += "tb";
		}
		else
		{
			if (isMinkan && i == _aryvn(arDorahyouji) - 1)
			{
				wanpai += "tb";
			}
			else
			{
				wanpai += arDorahyouji[i];
			}
		}
	}
	array seki = {"東", "南", "西", "北"};
	dict dSeki;
	array pNames;
	for (int i = 0; playerName[i] != nil; i++)
	{
		pNames += playerName[(i + oyaIndex) % 4];
	}
	for (int i = 0; pNames[i] != nil; i++)
	{
		dSeki += $(pNames[i], seki[i]);
	}
	//王牌
	if (!modeEx)
	{
		s += "\f[height,+16]\_l[110,-15]";
		s += convertUnicode("tb") + convertUnicode("tb");
	}
	for (int i = 0; wanpai[i] != nil; i++)
	{
		if (!modeEx)
			s += convertUnicode(wanpai[i]);
		animNo = "600" + (i + 1) + getSurfaceCode(wanpai[i]);
		siInfo += "\i[" + animNo + "]";
		savedTehai += animNo;
	}
	if (modeEx)
	{
		s += "\_l[350,370]" + arBafu[bafu] + kyoku + "局";
	}
	else
	{
		s += "\f[height,default]";
		//場風、局数、積み棒、供託棒
		s += "\_l[,0] " + arBafu[bafu] + kyoku + "局";
		s += "\_l[260,0]●x" + tsumibou + "\n";
		s += "\_l[260,]\f[color,red]●\f[color,default]x" + kyotaku;
	}
	for (int i = 0; i < tsumibou; i++)
	{
		animNo = "60001" + (i + 1);
		siInfo += "\i[" + animNo + "]";
		savedTehai += animNo;
	}
	for (int i = 0; i < kyotaku; i++)
	{
		animNo = "60002" + (i + 1);
		siInfo += "\i[" + animNo + "]";
		savedTehai += animNo;
	}
	//0-2
	for (int p = 0; p < 3; p++)
	{
		if (modeEx)
		{
			if (p == 0)
			{
				s += "\_l[550,250]" + dSeki[playerName[p]] + "家<<" + playerName[p] + ">>";
				s += "\n\_l[550,]" + arScore[p] + "点";
			}
			else if (p == 1)
			{
				s += "\_l[250,100]" + dSeki[playerName[p]] + "家<<" + playerName[p] + ">>";
				s += "\n\_l[250,]" + arScore[p] + "点";
			}
			else if (p == 2)
			{
				s += "\_l[100,500]" + dSeki[playerName[p]] + "家<<" + playerName[p] + ">>";
				s += "\n\_l[100,]" + arScore[p] + "点";
			}
		}
		else
		{
			s += "\_l[0," + (80 * p) + "]\f[height,default]" + dSeki[playerName[p]] + "家<<" + playerName[p] + ">>\n";
			s += "\f[height,+16]";
		}
		if (openTehai || (p == agariPlayer) || arTenpaiPlayerFlag[p])
		{
			string tsumoShowing = "";
			if (nPlayer == p && tsumo != "")
				tsumoShowing = tsumo;
			s += showHai(arTehai[p], tsumoShowing, p, nPlayer, 0, 1);
		}
		else
		{
			string tsumoShowing = "";
			if (nPlayer == p && tsumo != "")
				tsumoShowing = tsumo;
			s += showHai(arTehai[p], tsumoShowing, p, nPlayer, 0, 0);
		}
		s += "\n";
		s += showKawa(nPlayer, p, agariPlayer);
	}
	//3
	int pUser = 3;
	if (modeEx)
	{
		s += "\_l[500,630]" + dSeki[playerName[pUser]] + "家<<" + playerName[pUser] + ">>";
		s += "\n\_l[500,]" + arScore[pUser] + "点";
	}
	else
	{
		s += "\_l[0,240]\f[height,default]" + dSeki[playerName[pUser]] + "家<<" + playerName[pUser] + ">>\n";
	}
	s += "\f[height,+16]";
	s += showKawa(nPlayer, pUser, agariPlayer);
	s += "\n";
	string tsumoShowing = "";
	if (nPlayer == pUser)
		tsumoShowing = tsumo;
	s += showHai(arTehai[pUser], tsumoShowing, pUser, nPlayer, isFuro, 1);
	s += "\f[height,default]";
	int n = getLeftYama();
	if (n > 0 || tsumo != "")
	{
		if (modeEx)
			s += "\_l[350,390]残り: " + n + "枚";
		else
			s += "\n\n\_l[225,]残り: " + n + "枚";
	}
	else
	{
		if (modeEx)
			s += "\_l[350,390]流局";
		else
			s += "\n\n\_l[225,]流局";
	}
	s += "\_l[0,]";
	int nWord = 1;
	arSavedWordCommand = {};
	if (nPlayer == pUser && tsumo != "")
	{
		if (canTouhai(pUser, tsumo))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Touhai,3]倒牌\__q";
			animNo = "500017";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Touhai", 3};
		}
		if (canTsumo(pUser, tsumo))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Tsumo,3]ツモ\__q";
			animNo = "500012";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Tsumo", 3};
		}
		if (canRichi(pUser, tsumo))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Richi]リーチ\__q";
			animNo = "500011";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Richi"};
		}
		if (canKakan(pUser, tsumo) || canAnkan(pUser, tsumo))
		{
			array arKakanHai = getKakanHai(addHai(arTehai[pUser], tsumo));
			array arAnkanHai;
			if (arRichiJunme[pUser] == -1)
				arAnkanHai = getAnkanHai(addHai(arTehai[pUser], tsumo));
			else if (arRichiJunme[pUser] >= 0 && canAnkan(pUser, tsumo))
				arAnkanHai = {tsumo};
			if (_aryvn(arKakanHai) + _aryvn(arAnkanHai) == 1)
			{
				array saveCommand;
				if (_aryvn(arKakanHai) == 1)
				{
					if (!modeEx)
						s += "\![*]\__q[Menu_Kakan,3," + arKakanHai[0] + "]カン\__q";
					saveCommand = {"Menu_Kakan", 3, arKakanHai[0]};
				}
				else
				{
					if (!modeEx)
						s += "\![*]\__q[Menu_Ankan,3," + arAnkanHai[0] + "]カン\__q";
					saveCommand = {"Menu_Ankan", 3, arAnkanHai[0]};
				}
				animNo = "500016";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				animNo = "500" + (nWord++) + "99";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				offset += 110;
				arSavedWordCommand += saveCommand;
			}
			else
			{
				if (!modeEx)
					s += "\![*]カン";
				animNo = "500016";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				offset += 110;
				int nPaiIndex = 1;
				for (int i = 0; arKakanHai[i] != nil; i++)
				{
					if (!modeEx)
						s += " \__q[Menu_Kakan,3," + arKakanHai[i] + "]\f[height,+16]" + convertUnicode(arKakanHai[i]) + "\f[height,default]\__q";
					animNo = "500" + (nPaiIndex++) + getSurfaceCode(arKakanHai[i]);
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					animNo = "501" + (nWord++) + "99";
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					offset += 42;
					arSavedWordCommand += {"Menu_Kakan", 3, arKakanHai[i]};
				}
				for (int i = 0; arAnkanHai[i] != nil; i++)
				{
					if (!modeEx)
						s += " \__q[Menu_Ankan,3," + arAnkanHai[i] + "]\f[height,+16]" + convertUnicode(arAnkanHai[i]) + "\f[height,default]\__q";
					animNo = "500" + (nPaiIndex++) + getSurfaceCode(arAnkanHai[i]);
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					animNo = "501" + (nWord++) + "99";
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					offset += 42;
					arSavedWordCommand += {"Menu_Ankan", 3, arAnkanHai[i]};
				}
			}
		}
	}
	if (nPlayer != pUser && sute != "" && agariPlayer == -1)
	{
		if (canRon(pUser, sute))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Ron,3," + nPlayer + "," + sute + "]ロン\__q";
			animNo = "500013";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Ron", 3, nPlayer, sute};
		}
		if (canPon(pUser, sute))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Pon,3," + nPlayer + "," + sute + "]ポン\__q";
			animNo = "500015";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Pon", 3, nPlayer, sute};
		}
		if (nPlayer + 1 == pUser && canChi(pUser, sute) && !isKakan)
		{
			array arMaterial = getChiMaterial(arTehai[pUser], sute);
			if (_aryvn(arMaterial) == 1)
			{
				if (!modeEx)
					s += "\![*]\__q[Menu_Chi,3," + nPlayer + "," + sute + "," + arMaterial[0] + "]チー\__q";
				animNo = "500014";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				animNo = "500" + (nWord++) + "99";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				offset += 110;
				arSavedWordCommand += {"Menu_Chi", 3, nPlayer, sute, arMaterial[0]};
			}
			else
			{
				if (!modeEx)
					s += "\![*]チー";
				animNo = "500014";
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
				offset += 110;
				int nPaiIndex = 1;
				for (int i = 0; arMaterial[i] != nil; i++)
				{
					array arMaterialSelected = strHaiToArray(arMaterial[i]);
					string hai1 = arMaterialSelected[0];
					string hai2 = arMaterialSelected[1];
					if (!modeEx)
						s += " \__q[Menu_Chi,3," + nPlayer + "," + sute + "," + arMaterial[i] + "]\f[height,+16]" + convertUnicode(hai1) + convertUnicode(hai2) + "\f[height,default]\__q";
					animNo = "500" + (nPaiIndex++) + "" + getSurfaceCode(hai1);
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					animNo = "501" + (nWord++) + "99";
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					offset += 32;
					arSavedWordCommand += {"Menu_Chi", 3, nPlayer, sute, arMaterial[i]};
					animNo = "500" + (nPaiIndex++) + "" + getSurfaceCode(hai2);
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					animNo = "501" + (nWord++) + "99";
					si += "\![anim,offset," + animNo + "," + offset + ",0]";
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					offset += 42;
					arSavedWordCommand += {"Menu_Chi", 3, nPlayer, sute, arMaterial[i]};
				}
			}
		}
		if (canDaiminkan(pUser, sute))
		{
			if (!modeEx)
				s += "\![*]\__q[Menu_Daiminkan,3," + nPlayer + "," + sute + "]カン\__q";
			animNo = "500016";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			offset += 110;
			arSavedWordCommand += {"Menu_Daiminkan", 3, nPlayer, sute};
		}
		//次へ
		if (si != "")
		{
			animNo = "500001";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			animNo = "500" + (nWord++) + "99";
			si += "\![anim,offset," + animNo + "," + offset + ",0]";
			si += "\i[" + animNo + "]";
			savedTehai += animNo;
			arSavedWordCommand += {"Menu_NextTurn"};
		}
	}
	for (int i = 0; savedTehai[i] != nil; i++)
	{
		arSavedTehai[3] += savedTehai[i];
	}
	if (!isLockedDoubleClick)
	{
		if (modeEx)
		{
			s += "\_l[350,410]\![*]\__q[Menu_CANCEL]閉じる\__q\n";
			s += "\_l[350,]\![*]\__q[Menu_EndGame]対局終了\__q";
		}
		else
		{
			s += "\![*]\__q[Menu_CANCEL]閉じる\__q\n";
			s += "\![*]\__q[Menu_EndGame]対局終了\__q";
		}
	}
	return sClear + siInfo + si + s;
}

string click_w01(dict ref) { return getWordCommandFromClick(ref); }
string click_w02(dict ref) { return getWordCommandFromClick(ref); }
string click_w03(dict ref) { return getWordCommandFromClick(ref); }
string click_w04(dict ref) { return getWordCommandFromClick(ref); }
string click_w05(dict ref) { return getWordCommandFromClick(ref); }
string click_w06(dict ref) { return getWordCommandFromClick(ref); }
string click_w07(dict ref) { return getWordCommandFromClick(ref); }
string click_w08(dict ref) { return getWordCommandFromClick(ref); }
string click_w09(dict ref) { return getWordCommandFromClick(ref); }
string click_w11(dict ref) { return getWordCommandFromClick(ref); }
string click_w12(dict ref) { return getWordCommandFromClick(ref); }
string click_w13(dict ref) { return getWordCommandFromClick(ref); }
string click_w14(dict ref) { return getWordCommandFromClick(ref); }
string click_w15(dict ref) { return getWordCommandFromClick(ref); }
string click_w16(dict ref) { return getWordCommandFromClick(ref); }
string click_w17(dict ref) { return getWordCommandFromClick(ref); }
string click_w18(dict ref) { return getWordCommandFromClick(ref); }
string click_w19(dict ref) { return getWordCommandFromClick(ref); }
string getWordCommandFromClick(dict ref)
{
	if (isLockedSingleClick)
		return "";
	isLockedSingleClick = 1;
	int index = (int)_substr(ref["Reference4"], 2, 1);
	array arWordCommand = arSavedWordCommand[index - 1];
	arSavedWordCommand = {};
	string s = "\![raise,OnChoiceSelectEx,," + arWordCommand[0];
	for (int i = 1; arWordCommand[i] != nil; i++)
	{
		s += "," + arWordCommand[i];
	}
	s += "]";
	string si;
	for (int i = 0; arSavedTehai[3][i] != nil; i++)
	{
		string animNo = arSavedTehai[3][i];
		if (_substr(animNo, 0, 3) == "500")
			si += "\![anim,clear," + animNo + "]";
	}
	return "\0" + si + s + "\e";
}

string Menu_NextTurn(dict ref)
{
	string s = "\0" + reservedClickScript + "\e";
	reservedClickScript = "";
	return s;
}

string Menu_Richi(dict ref)
{
	isLockedSingleClick = 0;
	arRichiJunme[3] = _aryvn(arKawa[3]);
	string tsumo = arYama[nYamaIndex - 1];
	string s;
	string sr;
	sr += "\![raiseother," + playerName[0] + _bytechar(1) + playerName[1] + _bytechar(1) + playerName[2] + ",OnMahjong," + getVersion()
		+ ",say,user,richi]";
	s += "\0\b[2]\_q" + showStatus(tsumo, "", 3, -1, {0, 0, 0}, 0) + "\_q\e";
	lastScript = s;
	return sr + s;
}

string Menu_Kakan(dict ref)
{
	int nFuroPlayer = ref["Reference2"];
	string kakanHai = ref["Reference3"];
	string tsumo = arYama[nYamaIndex - 1];
	reservedKakan = 1;
	reservedSelectedHai = kakanHai;
	isLockedSingleClick = 0;
	return "\C\0\b[2]\![raise,OnSuteSelect," + nFuroPlayer + "," + tsumo + "]";
}

string Menu_Ankan(dict ref)
{
	int nFuroPlayer = ref["Reference2"];
	string ankanHai = ref["Reference3"];
	string tsumo = arYama[nYamaIndex - 1];
	reservedAnkan = 1;
	reservedSelectedHai = ankanHai;
	isLockedSingleClick = 0;
	return "\C\0\b[2]\![raise,OnSuteSelect," + nFuroPlayer + "," + tsumo + "]";
}

string Menu_Touhai(dict ref)
{
	int nTouhaiPlayer = ref["Reference2"];
	string reason = "touhai";
	array arTenpaiPlayerFlag = {0, 0, 0, 0};
	arTenpaiPlayerFlag[nTouhaiPlayer] = 1;
	return "\C\0\b[2]\![raise,OnRyukyokuScore," + reason + "," + _arystr(arTenpaiPlayerFlag) + "]\e";
}

string Menu_Tsumo(dict ref)
{
	int nAgariPlayer = ref["Reference2"];
	return "\C\0\b[2]\![raise,OnTsumoScore," + nAgariPlayer + "]\e";
}

string Menu_Pon(dict ref)
{
	int nFuroPlayer = ref["Reference2"];
	int nSutePlayer = ref["Reference3"];
	string sute = ref["Reference4"];
	string name = playerName[nFuroPlayer];
	reservedNaku[name] = {"pon"};
	return "\C\0\b[2]\![raise,OnChoiceSelectEx,,Menu_NextTurn]\e";
}

string Menu_Chi(dict ref)
{
	int nFuroPlayer = ref["Reference2"];
	int nSutePlayer = ref["Reference3"];
	string sute = ref["Reference4"];
	string hai = ref["Reference5"];
	array arHai = strHaiToArray(hai);
	string name = playerName[nFuroPlayer];
	reservedNaku[name] = {"chi", arHai[0], arHai[1]};
	return "\C\0\b[2]\![raise,OnChoiceSelectEx,,Menu_NextTurn]\e";
}

string Menu_Daiminkan(dict ref)
{
	int nFuroPlayer = ref["Reference2"];
	int nSutePlayer = ref["Reference3"];
	string sute = ref["Reference4"];
	string name = playerName[nFuroPlayer];
	reservedNaku[name] = {"kan"};
	return "\C\0\b[2]\![raise,OnChoiceSelectEx,,Menu_NextTurn]\e";
}

string Menu_Ron(dict ref)
{
	int nAgariPlayer = ref["Reference2"];
	string name = playerName[nAgariPlayer];
	reservedNaku[name] = {"ron"};
	return "\C\0\b[2]\![raise,OnChoiceSelectEx,,Menu_NextTurn]\e";
}

setFuro(int nFuroPlayer, int nSutePlayer, string sute, string haiUsed)
{
	arTehai[nFuroPlayer] = removeHai(arTehai[nFuroPlayer], haiUsed);
	arTehai[nFuroPlayer] = addFuro(arTehai[nFuroPlayer], sute + haiUsed, "<", ">");
	arFuroJunme[nSutePlayer] += _aryvn(arKawa[nSutePlayer]) - 1;
	arFuroHistory[nFuroPlayer] += {sute, nSutePlayer};
	arIppatsuChance = {0, 0, 0, 0};
	arChihouChance = {0, 0, 0, 0};
}

setKakan(int nFuroPlayer, string kakanHai)
{
	arTehai[nFuroPlayer] = removeHai(arTehai[nFuroPlayer], kakanHai);
	arTehai[nFuroPlayer] = _strreplace(arTehai[nFuroPlayer], kakanHai + kakanHai + kakanHai, kakanHai + kakanHai + kakanHai + kakanHai);
	arKakanHistory[nFuroPlayer] += kakanHai;
	arIppatsuChance = {0, 0, 0, 0};
	arChihouChance = {0, 0, 0, 0};
}

setAnkan(int nFuroPlayer, string ankanHai)
{
	arTehai[nFuroPlayer] = removeHai(arTehai[nFuroPlayer], ankanHai + ankanHai + ankanHai + ankanHai);
	arTehai[nFuroPlayer] = addFuro(arTehai[nFuroPlayer], ankanHai + ankanHai + ankanHai + ankanHai, "(", ")");;
	arIppatsuChance = {0, 0, 0, 0};
	arChihouChance = {0, 0, 0, 0};
}

string addFuro(string tehai, string furo, string s1, string s2)
{
	string s;
	string sFuro;
	for (int i = 0; i < _strlen(tehai); i++)
	{
		if (_substr(tehai, i, 1) == "<")
		{
			if (_substr(tehai, i + 7, 1) == ">")
			{
				sFuro += _substr(tehai, i, 8);
				i += 7;
			}
			else if (_substr(tehai, i + 9, 1) == ">")
			{
				sFuro += _substr(tehai, i, 10);
				i += 9;
			}
		}
		else if (_substr(tehai, i, 1) == "(")
		{
			if (_substr(tehai, i + 9, 1) == ")")
			{
				sFuro += _substr(tehai, i, 10);
				i += 9;
			}
		}
		else
		{
			s += _substr(tehai, i, 2);
			i++;
		}
	}
	string strFuro = _arystr(sortHai(strHaiToArray(furo)));
	s = s + s1 + strFuro + s2 + sFuro;
	return s;
}

string Menu_CANCEL(dict ref)
{
	return "\e";
}

clearStatus()
{
	arYama = {};
	arTehai = {"", "", "", ""};
	arKawa = {{}, {}, {}, {}};
	arFuritenCheckRichi = {{}, {}, {}, {}};
	arFuritenCheckTurn = {{}, {}, {}, {}};
	arRichiJunme = {-1, -1, -1, -1};
	arFuroJunme = {{}, {}, {}, {}};
	arFuroHistory = {{}, {}, {}, {}};
	arKakanHistory = {{}, {}, {}, {}};
	isRinshanChance = 0;
	arIppatsuChance = {0, 0, 0, 0};
	arChihouChance = {1, 1, 1, 1};
	arWRichi = {0, 0, 0, 0};
	dorahyouji = "";
	nYamaIndex = 0;
	lastScript = "";
}

//全牌
array getAllHai()
{
	array a = {
		"1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m",
		"1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p",
		"1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s",
		"1z", "2z", "3z", "4z", "5z", "6z", "7z",
		"1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m",
		"1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p",
		"1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s",
		"1z", "2z", "3z", "4z", "5z", "6z", "7z",
		"1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m",
		"1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p",
		"1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s",
		"1z", "2z", "3z", "4z", "5z", "6z", "7z",
		"1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m",
		"1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p",
		"1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s",
		"1z", "2z", "3z", "4z", "5z", "6z", "7z"
	};//n = 136
	return a;
}

string showHai(string strHai, string tsumoShowing, int showPlayer, int nPlayer, int isFuro, int isOpen, int isScore)
{
	string s;
	string si;
	array savedTehai = {};
	string animNo;
	array arHai = strHaiToArrayWithFuro(strHai);
	if (showPlayer != 3 || isScore)
	{
		string sFuro;
		int nFuro;
		int nFuroAnim;
		int nFuroOffset;
		int nNormal = 13;
		int offsetX = 32;
		for (int i = 0; arHai[i] != nil; i++)
		{
			if (arHai[i][0] == "furo")
			{
				if (_strlen(arHai[i][1]) == 6)
				{
					offsetX -= 45 + (32 * 2);
				}
				else
				{
					offsetX -= 45 + (32 * 3);
					if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
						offsetX += 32;
				}
			}
			else if (arHai[i][0] == "ankan")
			{
				offsetX -= 32 * 4;
			}
		}
		for (int i = 0; arHai[i] != nil; i++)
		{
			if (arHai[i][0] == "normal")
			{
				string haiCode;
				if (isOpen)
					haiCode = arHai[i][1];
				else
					haiCode = "tb";
				s += convertUnicode(haiCode);
				animNo = "" + (showPlayer + 1) + "0" + fillzero(i + 1) + getSurfaceCode(haiCode);
				si += "\i[" + animNo + "]";
				savedTehai += animNo;
			}
			else if (arHai[i][0] == "furo")
			{
				sFuro += showFuroWithColor(arHai[i][1], showPlayer, nFuro);
				si += showFuroByAnim(arHai[i][1], showPlayer, nFuro, nFuroAnim, offsetX);
				nFuro++;
				nFuroAnim++;
				nFuroOffset += _strlen(arHai[i][1]) / 2;
				offsetX += 45 + (32 * (_strlen(arHai[i][1]) / 2 - 1));
				if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
					offsetX -= 32;
				nNormal -= 3;
			}
			else if (arHai[i][0] == "ankan")
			{
				sFuro += showAnkan(arHai[i][1]);
				si += showAnkanByAnim(arHai[i][1], showPlayer, nFuroAnim, offsetX);
				nFuroAnim++;
				nFuroOffset += _strlen(arHai[i][1]) / 2;
				offsetX += 32 * 4;
				nNormal -= 3;
			}
		}
		if (tsumoShowing != "")
		{
			s += " ";
			string haiCode;
			if (isOpen)
				haiCode += tsumoShowing;
			else
				haiCode += "tb";
			s += convertUnicode(haiCode);
			animNo = "" + (showPlayer + 1) + "0" + fillzero(14) + getSurfaceCode(haiCode);
			savedTehai += animNo;
			int offset = 16 - ((13 - nNormal) * 32);
			si += getFuroAnimOffset(showPlayer, animNo, offset, 0);
		}
		if (sFuro != "")
			s += "\_l[" + (260 - (15 * nFuroOffset)) + ",]" + sFuro;
		for (int i = 0; savedTehai[i] != nil; i++)
		{
			arSavedTehai[showPlayer] += savedTehai[i];
		}
	}
	else
	{
		savedTsumo = tsumoShowing;
		string sFuro;
		int nFuro;
		int nFuroAnim;
		int nFuroOffset;
		int nNormal = 13;
		int offsetX = 32;
		for (int i = 0; arHai[i] != nil; i++)
		{
			if (arHai[i][0] == "furo")
			{
				if (_strlen(arHai[i][1]) == 6)
				{
					offsetX -= 45 + (32 * 2);
				}
				else
				{
					offsetX -= 45 + (32 * 3);
					if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
						offsetX += 32;
				}
			}
			else if (arHai[i][0] == "ankan")
			{
				offsetX -= 32 * 4;
			}
		}
		for (int i = 0; arHai[i] != nil; i++)
		{
			if (tsumoShowing != "")
			{
				if (arHai[i][0] == "normal")
				{
					if (arRichiJunme[3] == -1)
					{
						s += "\__q[Menu_Sutehai," + arHai[i][1] + "," + tsumoShowing + "]" + convertUnicode(arHai[i][1]) + "\__q";
						animNo = "40" + fillzero(i + 1) + getSurfaceCode(arHai[i][1]);
						si += "\i[" + animNo + "]";
						savedTehai += animNo;
						si += "\i[40" + fillzero(i + 1) + "99]";
					}
					else if (arRichiJunme[3] == _aryvn(arKawa[3]))
					{
						int shanten = getShanten(removeHai(addHai(arTehai[3], tsumoShowing), arHai[i][1]));
						if (shanten == 0)
						{
							s += "\__q[Menu_Sutehai," + arHai[i][1] + "," + tsumoShowing + "]" + convertUnicode(arHai[i][1]) + "\__q";
							animNo = "40" + fillzero(i + 1) + getSurfaceCode(arHai[i][1]);
							si += "\i[" + animNo + "]";
							savedTehai += animNo;
							si += "\i[40" + fillzero(i + 1) + "99]";
						}
						else
						{
							s += "\f[color,gray]" + convertUnicode(arHai[i][1]) + "\f[color,default]";
							animNo = "40" + fillzero(i + 1) + "" + ((int)getSurfaceCode(arHai[i][1]) + 50);
							si += "\i[" + animNo + "]";
							savedTehai += animNo;
						}
					}
					else
					{
						s += convertUnicode(arHai[i][1]);
						animNo = "40" + fillzero(i + 1) + getSurfaceCode(arHai[i][1]);
						si += "\i[" + animNo + "]";
						savedTehai += animNo;
					}
				}
				else if (arHai[i][0] == "furo")
				{
					sFuro += showFuroWithColor(arHai[i][1], showPlayer, nFuro);
					si += showFuroByAnim(arHai[i][1], showPlayer, nFuro, nFuroAnim, offsetX);
					nFuro++;
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 45 + (32 * (_strlen(arHai[i][1]) / 2 - 1));
					if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
						offsetX -= 32;
					nNormal -= 3;
				}
				else if (arHai[i][0] == "ankan")
				{
					sFuro += showAnkan(arHai[i][1]);
					si += showAnkanByAnim(arHai[i][1], showPlayer, nFuroAnim, offsetX);
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 32 * 4;
					nNormal -= 3;
				}
			}
			else if (isFuro && showPlayer == nPlayer && tsumoShowing == "")
			{
				if (arHai[i][0] == "normal")
				{
					s += "\__q[Menu_Sutehai," + arHai[i][1] + ",]" + convertUnicode(arHai[i][1]) + "\__q";
					animNo = "40" + fillzero(i + 1) + getSurfaceCode(arHai[i][1]);
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
					si += "\i[40" + fillzero(i + 1) + "99]";
				}
				else if (arHai[i][0] == "furo")
				{
					sFuro += showFuroWithColor(arHai[i][1], showPlayer, nFuro);
					si += showFuroByAnim(arHai[i][1], showPlayer, nFuro, nFuroAnim, offsetX);
					nFuro++;
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 45 + (32 * (_strlen(arHai[i][1]) / 2 - 1));
					if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
						offsetX -= 32;
					nNormal -= 3;
				}
				else if (arHai[i][0] == "ankan")
				{
					sFuro += showAnkan(arHai[i][1]);
					si += showAnkanByAnim(arHai[i][1], showPlayer, nFuroAnim, offsetX);
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 32 * 4;
					nNormal -= 3;
				}
			}
			else
			{
				if (arHai[i][0] == "normal")
				{
					s += convertUnicode(arHai[i][1]);
					animNo = "40" + fillzero(i + 1) + getSurfaceCode(arHai[i][1]);
					si += "\i[" + animNo + "]";
					savedTehai += animNo;
				}
				else if (arHai[i][0] == "furo")
				{
					sFuro += showFuroWithColor(arHai[i][1], showPlayer, nFuro);
					si += showFuroByAnim(arHai[i][1], showPlayer, nFuro, nFuroAnim, offsetX);
					nFuro++;
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 45 + (32 * (_strlen(arHai[i][1]) / 2 - 1));
					if (ASEARCH(_substr(arHai[i][1], 0, 2), arKakanHistory[showPlayer]) >= 0)
						offsetX -= 32;
					nNormal -= 3;
				}
				else if (arHai[i][0] == "ankan")
				{
					sFuro += showAnkan(arHai[i][1]);
					si += showAnkanByAnim(arHai[i][1], showPlayer, nFuroAnim, offsetX);
					nFuroAnim++;
					nFuroOffset += _strlen(arHai[i][1]) / 2;
					offsetX += 32 * 4;
					nNormal -= 3;
				}
			}
		}
		if (tsumoShowing != "")
		{
			s += " ";
			if (arRichiJunme[3] == _aryvn(arKawa[3]))
			{
				int shanten = getShanten(arTehai[3]);
				if (shanten == 0)
				{
					s += "\__q[Menu_Sutehai," + tsumoShowing + "," + tsumoShowing + "]" + convertUnicode(tsumoShowing) + "\__q";					
					animNo = "40" + fillzero(14) + getSurfaceCode(tsumoShowing);
					savedTehai += animNo;
					si += "\![anim,offset," + animNo + "," + (16 - ((13 - nNormal) * 32)) + ",0]";
					si += "\i[" + animNo + "]";
					animNo = "40" + fillzero(14) + "99";
					si += "\![anim,offset," + animNo + "," + (16 - ((13 - nNormal) * 32)) + ",0]";
					si += "\i[" + animNo + "]";
				}
				else
				{
					s += "\f[color,gray]" + convertUnicode(tsumoShowing) + "\f[color,default]";
					animNo = "40" + fillzero(14) + "" + ((int)getSurfaceCode(tsumoShowing) + 50);
					savedTehai += animNo;
					si += "\![anim,offset," + animNo + "," + (16 - ((13 - nNormal) * 32)) + ",0]";
					si += "\i[" + animNo + "]";
				}
			}
			else
			{
				s += "\__q[Menu_Sutehai," + tsumoShowing + "," + tsumoShowing + "]" + convertUnicode(tsumoShowing) + "\__q";
				animNo = "40" + fillzero(14) + getSurfaceCode(tsumoShowing);
				savedTehai += animNo;
				si += "\![anim,offset," + animNo + "," + (16 - ((13 - nNormal) * 32)) + ",0]";
				si += "\i[" + animNo + "]";
				animNo = "40" + fillzero(14) + "99";
				si += "\![anim,offset," + animNo + "," + (16 - ((13 - nNormal) * 32)) + ",0]";
				si += "\i[" + animNo + "]";
			}
		}
		if (sFuro != "")
			s += "\_l[" + (260 - (15 * nFuroOffset)) + ",]" + sFuro;
		for (int i = 0; savedTehai[i] != nil; i++)
		{
			arSavedTehai[3] += savedTehai[i];
		}
	}
	if (modeEx)
		return si;
	else
		return s + si;
}

string fillzero(int n)
{
	if (n < 10)
		return "0" + n;
	else
		return "" + n;
}

string showFuroWithColor(string strFuro, int nPlayer, int nFuroIndex)
{
	int nFuroIndexRev = (_aryvn(arFuroHistory[nPlayer]) - 1) - nFuroIndex;
	string strFuroHai = arFuroHistory[nPlayer][nFuroIndexRev][0];
	int nSutePlayer = arFuroHistory[nPlayer][nFuroIndexRev][1];
	strFuro = strFuroHai + removeHai(strFuro, strFuroHai);
	string s;
	if (_strlen(strFuro) == 6)
	{
		if ((4 + nPlayer - nSutePlayer) % 4 == 1)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 0, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 0, 2));
		if ((4 + nPlayer - nSutePlayer) % 4 == 2)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 2, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 2, 2));
		if ((4 + nPlayer - nSutePlayer) % 4 == 3)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 4, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 4, 2));
	}
	else if (_strlen(strFuro) == 8)
	{
		if ((4 + nPlayer - nSutePlayer) % 4 == 1)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 0, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 0, 2));
		s += convertUnicode(_substr(strFuro, 2, 2));
		if ((4 + nPlayer - nSutePlayer) % 4 == 2)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 4, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 4, 2));
		if ((4 + nPlayer - nSutePlayer) % 4 == 3)
			s += "\f[color,blue]" + convertUnicode(_substr(strFuro, 6, 2)) + "\f[color,default]";
		else
			s += convertUnicode(_substr(strFuro, 6, 2));
	}
	return s;
}

string showFuroByAnim(string strFuro, int nPlayer, int nFuroIndex, int nFuroAminIndex, int offsetX)
{
	int nFuroIndexRev = (_aryvn(arFuroHistory[nPlayer]) - 1) - nFuroIndex;
	string strFuroHai = arFuroHistory[nPlayer][nFuroIndexRev][0];
	int nSutePlayer = arFuroHistory[nPlayer][nFuroIndexRev][1];
	strFuro = strFuroHai + removeHai(strFuro, strFuroHai);
	array savedTehai = {};
	string s;
	if (_strlen(strFuro) == 6)
	{
		string animNo;
		if ((4 + nPlayer - nSutePlayer) % 4 == 1)
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + getSurfaceCode(_substr(strFuro, 0, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
			offsetX += 45;
		}
		else
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "1" + getSurfaceCode(_substr(strFuro, 0, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
			offsetX += 32;
		}
		if ((4 + nPlayer - nSutePlayer) % 4 == 2)
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + getSurfaceCode(_substr(strFuro, 2, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
			offsetX += 45;
		}
		else
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "2" + getSurfaceCode(_substr(strFuro, 2, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
			offsetX += 32;
		}
		if ((4 + nPlayer - nSutePlayer) % 4 == 3)
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + getSurfaceCode(_substr(strFuro, 4, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
		}
		else
		{
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "3" + getSurfaceCode(_substr(strFuro, 4, 2));
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
		}
	}
	else if (_strlen(strFuro) == 8)
	{
		string animNo;
		string hai = _substr(strFuro, 0, 2);
		string haiCode = getSurfaceCode(hai);
		if (ASEARCH(hai, arKakanHistory[nPlayer]) >= 0)
		{
			if ((4 + nPlayer - nSutePlayer) % 4 == 1)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "6" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				offsetX += 45;
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "1" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
				offsetX += 32;
			}
			if ((4 + nPlayer - nSutePlayer) % 4 == 2)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "6" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				offsetX += 45;
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "2" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
				offsetX += 32;
			}
			if ((4 + nPlayer - nSutePlayer) % 4 == 3)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "6" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "3" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
			}
		}
		else
		{
			if ((4 + nPlayer - nSutePlayer) % 4 == 1)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				offsetX += 45;
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "1" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
				offsetX += 32;
			}
			animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "2" + haiCode;
			savedTehai += animNo;
			s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
			offsetX += 32;
			if ((4 + nPlayer - nSutePlayer) % 4 == 2)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
				offsetX += 45;
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "3" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
				offsetX += 32;
			}
			if ((4 + nPlayer - nSutePlayer) % 4 == 3)
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "5" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 13);
			}
			else
			{
				animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAminIndex) + "4" + haiCode;
				savedTehai += animNo;
				s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
			}
		}
	}
	for (int i = 0; savedTehai[i] != nil; i++)
	{
		arSavedTehai[nPlayer] += savedTehai[i];
	}
	return s;
}

string getFuroAnimOffset(int nPlayer, string animNo, int offset, int size)
{
	string s;
	if (nPlayer == 3)
		s = "\![anim,offset," + animNo + "," + offset + ",0]\i[" + animNo + "]";
	else if (nPlayer == 0)
		s = "\![anim,offset," + animNo + ",0," + (-1 * (offset + size)) + "]\i[" + animNo + "]";
	else if (nPlayer == 1)
		s = "\![anim,offset," + animNo + "," + (-1 * (offset + size)) + ",0]\i[" + animNo + "]";
	else if (nPlayer == 2)
		s = "\![anim,offset," + animNo + ",0," + offset + "]\i[" + animNo + "]";
	return s;
}

string showAnkan(string strAnkan)
{
	string hai = _substr(strAnkan, 0, 2);
	return convertUnicode("tb") + convertUnicode(hai) + convertUnicode(hai) + convertUnicode("tb");
}

string showAnkanByAnim(string strAnkan, int nPlayer, int nFuroAnimIndex, int offsetX)
{
	string s;
	string animNo;
	array savedTehai = {};
	string hai = _substr(strAnkan, 0, 2);
	animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAnimIndex) + "1" + getSurfaceCode("tb");
	savedTehai += animNo;
	s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
	offsetX += 32;
	animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAnimIndex) + "2" + getSurfaceCode(hai);
	savedTehai += animNo;
	s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
	offsetX += 32;
	animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAnimIndex) + "3" + getSurfaceCode(hai);
	savedTehai += animNo;
	s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
	offsetX += 32;
	animNo = "" + (nPlayer + 1) + "0" + (2 + nFuroAnimIndex) + "4" + getSurfaceCode("tb");
	savedTehai += animNo;
	s += getFuroAnimOffset(nPlayer, animNo, offsetX, 0);
	for (int i = 0; savedTehai[i] != nil; i++)
	{
		arSavedTehai[nPlayer] += savedTehai[i];
	}
	return s;
}

string showKawa(int nPlayer, int p, int agariPlayer)
{
	string s;
	string si;
	array savedTehai = {};
	for (int i = 0; arKawa[p][i] != nil; i++)
	{
		string animNo = "" + (p + 1) + "1" + fillzero(i) + getSurfaceCode(arKawa[p][i]);
		if ((i == arRichiJunme[p]) && (ASEARCH(i, arFuroJunme[p]) >= 0))
		{
			s += "\f[color,red]" + convertUnicode(arKawa[p][i]) + "\f[color,default]";
			animNo = "" + (p + 1) + "2" + fillzero(i) + "" + ((int)getSurfaceCode(arKawa[p][i]) + 50);
		}
		else if (i == arRichiJunme[p])
		{
			s += "\f[color,red]" + convertUnicode(arKawa[p][i]) + "\f[color,default]";
			animNo = "" + (p + 1) + "2" + fillzero(i) + getSurfaceCode(arKawa[p][i]);
		}
		else if (ASEARCH(i, arFuroJunme[p]) >= 0)
		{
			s += "\f[color,gray]" + convertUnicode(arKawa[p][i]) + "\f[color,default]";
			animNo = "" + (p + 1) + "1" + fillzero(i) + "" + ((int)getSurfaceCode(arKawa[p][i]) + 50);
		}
		else if (agariPlayer >= 0 && p != agariPlayer && p == nPlayer && i == _aryvn(arKawa[p]) - 1)
		{
			s += "\f[color,purple]" + convertUnicode(arKawa[p][i]) + "\f[color,default]";
		}
		else
		{
			s += convertUnicode(arKawa[p][i]);
		}
		if (arRichiJunme[p] >= 0 && i > arRichiJunme[p] && (int)(i / 6) == (int)(arRichiJunme[p] / 6))
		{
			int offset = 13;
			if (p == 0)
				si += "\![anim,offset," + animNo + ",0,-" + offset + "]";
			else if (p == 1)
				si += "\![anim,offset," + animNo + ",-" + offset + ",0]";
			else if (p == 2)
				si += "\![anim,offset," + animNo + ",0," + offset + "]";
			else if (p == 3)
				si += "\![anim,offset," + animNo + "," + offset + ",0]";
		}
		savedTehai += animNo;
		si += "\i[" + animNo + "]";
	}
	for (int i = 0; savedTehai[i] != nil; i++)
	{
		arSavedTehai[p] += savedTehai[i];
	}
	if (modeEx)
		return si;
	else
		return s + si;
}

string addHai(string strHai1, string strHai2)
{
	array arHai2 = strHaiToArray(strHai2);
	string strToAdd = strHai1;
	for (int i = 0; arHai2[i] != nil; i++)
	{
		string strAdded = "";
		int isAdded = 0;
		for (int j = 0; j < _strlen(strToAdd); j++)
		{
			if (_substr(strToAdd, j, 1) == "<")
			{
				if (!isAdded)
				{
					isAdded = 1;
					strAdded = _arystr(sortHai(strHaiToArray(strAdded + arHai2[i])));
				}
				if (_substr(strToAdd, j + 7, 1) == ">")
				{
					strAdded += _substr(strToAdd, j, 8);
					j += 7;
				}
				else if (_substr(strToAdd, j + 9, 1) == ">")
				{
					strAdded += _substr(strToAdd, j, 10);
					j += 9;
				}
			}
			else if (_substr(strToAdd, j, 1) == "(")
			{
				if (!isAdded)
				{
					isAdded = 1;
					strAdded = _arystr(sortHai(strHaiToArray(strAdded + arHai2[i])));
				}
				if (_substr(strToAdd, j + 9, 1) == ")")
				{
					strAdded += _substr(strToAdd, j, 10);
					j += 9;
				}
			}
			else
			{
				strAdded += _substr(strToAdd, j, 2);
				j++;
			}
		}
		if (!isAdded)
		{
			strAdded = _arystr(sortHai(strHaiToArray(strAdded + arHai2[i])));
		}
		strToAdd = strAdded;
	}
	return strToAdd;
}

string removeHai(string strHai1, string strHai2)
{
	array arHai2 = strHaiToArray(strHai2);
	string strToRemove = strHai1;
	for (int i = 0; arHai2[i] != nil; i++)
	{
		string strRemoved = "";
		int isRemoved = 0;
		for (int j = 0; j < _strlen(strToRemove); j++)
		{
			if (_substr(strToRemove, j, 1) == "<")
			{
				if (_substr(strToRemove, j + 7, 1) == ">")
				{
					strRemoved += _substr(strToRemove, j, 8);
					j += 7;
				}
				else if (_substr(strToRemove, j + 9, 1) == ">")
				{
					strRemoved += _substr(strToRemove, j, 10);
					j += 9;
				}
			}
			else if (_substr(strToRemove, j, 1) == "(")
			{
				if (_substr(strToRemove, j + 9, 1) == ")")
				{
					strRemoved += _substr(strToRemove, j, 10);
					j += 9;
				}
			}
			else
			{
				if (!isRemoved && _substr(strToRemove, j, 2) == arHai2[i])
				{
					isRemoved = 1;
				}
				else
				{
					strRemoved += _substr(strToRemove, j, 2);
				}
				j++;
			}
		}
		strToRemove = strRemoved;
	}
	return strToRemove;
}

array removeElementByName(array ary, string name, int count)
{
	array arRet;
	int n = 0;
	for (int i = 0; ary[i] != nil; i++)
	{
		if (ary[i] == name && n < count)
		{
			n++;
		}
		else
		{
			arRet += ary[i];
		}
	}
	return arRet;
}

array strHaiToArray(string strHai)
{
	array arRet;
	for (int i = 0; i < _strlen(strHai); i++)
	{
		arRet += _substr(strHai, i, 2);
		i++;
	}
	return arRet;
}

array strHaiToArrayWithoutFuro(string strHai)
{
	array arRet;
	for (int i = 0; i < _strlen(strHai); i++)
	{
		if (_substr(strHai, i, 1) == "<" || _substr(strHai, i, 1) == "(")
			return arRet;
		arRet += _substr(strHai, i, 2);
		i++;
	}
	return arRet;
}

array strHaiToArrayWithFuro(string strHai)
{
	array arRet;
	for (int i = 0; i < _strlen(strHai); i++)
	{
		if (_substr(strHai, i, 1) == "<")
		{
			if (_substr(strHai, i + 7, 1) == ">")
			{
				arRet += {"furo", _substr(strHai, i + 1, 6)};
				i += 7;
			}
			else if (_substr(strHai, i + 9, 1) == ">")
			{
				arRet += {"furo", _substr(strHai, i + 1, 8)};
				i += 9;
			}
		}
		else if (_substr(strHai, i, 1) == "(")
		{
			if (_substr(strHai, i + 9, 1) == ")")
			{
				arRet += {"ankan", _substr(strHai, i + 1, 8)};
				i += 9;
			}
		}
		else
		{
			arRet += {"normal", _substr(strHai, i, 2)};
			i++;
		}
	}
	return arRet;
}

array shuffleArray(array a)
{
	array arRet;
	while (_aryvn(a) > 0)
	{
		int n = _aryvn(a);
		int index = _rand() * n / 10000;
		array an = {};
		for (int i = 0; i < n; i++)
		{
			if (i == index)
				arRet += a[i];
			else
				an += a[i];
		}
		a = an;
	}
	return arRet;
}

array getArrayRange(array a, int start, int end)
{
	array arRet;
	int x;
	int y;
	if (start <= end)
	{
		x = start;
		y = end;
	}
	else
	{
		x = end;
		y = start;
	}
	for (int i = x; i <= y; i++)
	{
		arRet += a[i];
	}
	return arRet;
}

array uniq(array ary)
{
	array a;
	for (int i = 0; ary[i] != nil; i++)
	{
		if (ASEARCH(ary[i], a) == -1)
			a += ary[i];
	}
	return a;
}

int ASEARCH(string key, array ary)
{
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			return i;
	}
	return -1;
}

array ASEARCHEX(string key, array ary)
{
	array ret = {};
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			ret += i;
	}
	return ret;
}

string JOIN(array a, string delim)
{
	if (_aryvn(a) < 1)
		return "";
	if (_aryvn(a) < 2)
		return a[0];
	string s = a[0];
	for (int i = 1; a[i] != nil; i++)
	{
		s += delim + a[i];
	}
	return s;
}

//ソート
array sortHai(array a)
{
	array arRet;
	//バブルソートでいいや…
	while (_aryvn(a) > 0)
	{
		int n = _aryvn(a);
		int index = -1;
		int minValue = 99;
		array an = {};
		for (int i = 0; i < n; i++)
		{
			int v = getSortCode(a[i]);
			if (v < minValue) {
				if (index >= 0)
					an += a[index];
				index = i;
				minValue = v;
			}
			else
			{
				an += a[i];
			}
		}
		arRet += a[index];
		a = an;
	}
	return arRet;
}

//\_u[0xXXXXX]形式に変換
string convertUnicode(string hai)
{
	dict d = ${
		$("1m", "1F007"),//一萬
		$("2m", "1F008"),
		$("3m", "1F009"),
		$("4m", "1F00A"),
		$("5m", "1F00B"),
		$("6m", "1F00C"),
		$("7m", "1F00D"),
		$("8m", "1F00E"),
		$("9m", "1F00F"),
		$("1p", "1F019"),//一筒
		$("2p", "1F01A"),
		$("3p", "1F01B"),
		$("4p", "1F01C"),
		$("5p", "1F01D"),
		$("6p", "1F01E"),
		$("7p", "1F01F"),
		$("8p", "1F020"),
		$("9p", "1F021"),
		$("1s", "1F010"),//一索
		$("2s", "1F011"),
		$("3s", "1F012"),
		$("4s", "1F013"),
		$("5s", "1F014"),
		$("6s", "1F015"),
		$("7s", "1F016"),
		$("8s", "1F017"),
		$("9s", "1F018"),
		$("1z", "1F000"),//東
		$("2z", "1F001"),//南
		$("3z", "1F002"),//西
		$("4z", "1F003"),//北
		$("5z", "1F006"),//白
		$("6z", "1F005"),//発
		$("7z", "1F004"),//中
		$("tb", "1F02B")//Tile Back
	};
	return "\_u[0x" + d[hai] + "]";
}

//ソート順定義
int getSortCode(string hai)
{
	string s = "1m2m3m4m5m6m7m8m9m1p2p3p4p5p6p7p8p9p1s2s3s4s5s6s7s8s9s1z2z3z4z5z6z7z";
	int index = _strstr(s, hai);
	int r = index / 2;
	return r;
}

//surfaces.txtの定義番号に変換
string getSurfaceCode(string hai)
{
	dict d = ${
		$("1m", "01"),//一萬
		$("2m", "02"),
		$("3m", "03"),
		$("4m", "04"),
		$("5m", "05"),
		$("6m", "06"),
		$("7m", "07"),
		$("8m", "08"),
		$("9m", "09"),
		$("1p", "11"),//一筒
		$("2p", "12"),
		$("3p", "13"),
		$("4p", "14"),
		$("5p", "15"),
		$("6p", "16"),
		$("7p", "17"),
		$("8p", "18"),
		$("9p", "19"),
		$("1s", "21"),//一索
		$("2s", "22"),
		$("3s", "23"),
		$("4s", "24"),
		$("5s", "25"),
		$("6s", "26"),
		$("7s", "27"),
		$("8s", "28"),
		$("9s", "29"),
		$("1z", "31"),//東
		$("2z", "32"),//南
		$("3z", "33"),//西
		$("4z", "34"),//北
		$("5z", "35"),//白
		$("6z", "36"),//発
		$("7z", "37"),//中
		$("tb", "00")//Tile Back
	};
	return d[hai];
}
