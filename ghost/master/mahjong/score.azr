//ロン
string OnRonScore(dict ref)
{
	int nAgariPlayer = ref["Reference0"];
	int nFurikomiPlayer = ref["Reference1"];
	string hai13 = arTehai[nAgariPlayer];
	string sute = ref["Reference2"];
	isLockedSingleClick = 0;
	return showScoreResult(nAgariPlayer, nFurikomiPlayer, hai13, sute, {}, "");
}

//ツモ
string OnTsumoScore(dict ref)
{
	int nAgariPlayer = ref["Reference0"];
	int nFurikomiPlayer = -1;
	string hai13 = arTehai[nAgariPlayer];
	string tsumo = arYama[nYamaIndex - 1];
	isLockedSingleClick = 0;
	return showScoreResult(nAgariPlayer, nFurikomiPlayer, hai13, tsumo, {}, "");
}

//流局
string OnRyukyokuScore(dict ref)
{
	string reason = ref["Reference0"];
	array arTenpaiPlayerFlag = {};
	int nAgariPlayer = -1;
	if (reason == "nagashimangan")
		nAgariPlayer = ref["Reference1"];
	else if (reason == "4richi")
		arTenpaiPlayerFlag = {1, 1, 1, 1};
	else if (reason == "kouhai" || reason == "3ron" || reason == "touhai")
		arTenpaiPlayerFlag = _strary(ref["Reference1"]);
	string tsumo;
	if (reason == "touhai")
		tsumo = arYama[nYamaIndex - 1];
	isLockedSingleClick = 0;
	return showScoreResult(nAgariPlayer, -1, {}, tsumo, arTenpaiPlayerFlag, reason);
}

//点数画面表示
string showScoreResult(int nAgariPlayer, int nFurikomiPlayer, string hai13, string atariHai, array arTenpaiPlayerFlag, string reason)
{
	string s;
	s += "\![set,balloontimeout,0]\![set,choicetimeout,0]\0\s[0]\b[2]\_q";
	//王牌表示
	array wanpaiOmote;
	array wanpaiUra;
	array arDorahyouji = strHaiToArray(dorahyouji);
	string uradorahyouji;
	string siInfo = "";
	array savedTehai = {};
	string animNo;
	for (int i = 0; arDorahyouji[i] != nil; i++)
	{
		uradorahyouji += arYama[59 + i];
	}
	array arUradorahyouji = strHaiToArray(uradorahyouji);
	for (int i = 0; i < 5; i++)
	{
		if (arDorahyouji[i] == nil)
		{
			wanpaiOmote += "tb";
			wanpaiUra += "tb";
		}
		else
		{
			wanpaiOmote += arDorahyouji[i];
			wanpaiUra += arUradorahyouji[i];
		}
	}
	if (nAgariPlayer >= 0 && reason == "")
	{
		if (!modeEx)
		{
			s += "\f[height,+16]\_l[110,]";
			s += convertUnicode("tb") + convertUnicode("tb");
		}
		for (int i = 0; wanpaiOmote[i] != nil; i++)
		{
			if (!modeEx)
				s += convertUnicode(wanpaiOmote[i]);
			animNo = "601" + (i + 1) + "0" + getSurfaceCode(wanpaiOmote[i]);
			siInfo += "\i[" + animNo + "]";
			savedTehai += animNo;
		}
		if (!modeEx)
		{
			s += "\n\_l[110,]";
			s += convertUnicode("tb") + convertUnicode("tb");
		}
		for (int i = 0; wanpaiUra[i] != nil; i++)
		{
			if (!modeEx)
				s += convertUnicode(wanpaiUra[i]);
			animNo = "600" + (i + 1) + "0" + getSurfaceCode(wanpaiUra[i]);
			siInfo += "\i[" + animNo + "]";
			savedTehai += animNo;
		}
	}
	else
	{
		if (!modeEx)
		{
			s += "\f[height,+16]\_l[110,]";
			s += convertUnicode("tb") + convertUnicode("tb");
		}
		for (int i = 0; wanpaiOmote[i] != nil; i++)
		{
			if (!modeEx)
				s += convertUnicode(wanpaiOmote[i]);
			animNo = "600" + (i + 1) + "0" + getSurfaceCode(wanpaiOmote[i]);
			siInfo += "\i[" + animNo + "]";
			savedTehai += animNo;
		}
	}
	if (!modeEx)
	{
		s += "\f[height,default]\n\n";
		//場風、局数、積み棒、供託棒
		s += "\_l[215,0] " + arBafu[bafu] + kyoku + "局";
		s += "\_l[260,0]●x" + tsumibou + "\n";
		s += "\_l[260,]\f[color,red]●\f[color,default]x" + kyotaku;
		s += "\_l[0,80]";
	}
	int n = tsumibou;
	if (n > 9)
		n = 9;
	for (int i = 0; i < n; i++)
	{
		animNo = "600001" + (i + 1);
		siInfo += "\i[" + animNo + "]";
		savedTehai += animNo;
	}
	n = kyotaku;
	if (n > 9)
		n = 9;
	for (int i = 0; i < n; i++)
	{
		animNo = "600002" + (i + 1);
		siInfo += "\i[" + animNo + "]";
		savedTehai += animNo;
	}
	//役・点数表示
	int score;
	int nFu;
	dict dYakuman;
	dict dYakuAndHan;
	int nPaoPlayerDaisangen = -1;
	int nPaoPlayerDaisushi = -1;
	int countYakuman = 0;
	if (nAgariPlayer >= 0 && reason == "")
	{
		string bafuHai = getBafuHai();
		string jifuHai = getJifuHai(nAgariPlayer);
		int isRichi = 0;
		if (arRichiJunme[nAgariPlayer] >= 0)
			isRichi = 1;
		string strDora;
		for (int i = 0; arDorahyouji[i] != nil; i++)
		{
			strDora += getDoraFromDorahyouji(arDorahyouji[i]);
			if (isRichi)
				strDora += getDoraFromDorahyouji(arUradorahyouji[i]);
		}
		int isOya = 0;
		if (nAgariPlayer == oyaIndex)
			isOya = 1;
		int isTsumo = 0;
		if (nFurikomiPlayer == -1)
			isTsumo = 1;
		int nRichi = isRichi;
		if (arWRichi[nAgariPlayer])
			nRichi = 2;
		int isIppatsu = arIppatsuChance[nAgariPlayer];
		int is1stRound = arChihouChance[nAgariPlayer];
		int isFinalTileWin = 0;
		if (_aryvn(arYama) == nYamaIndex)
			isFinalTileWin = 1;
		int isRinshan = 0;
		int isChankan = 0;
		if (isTsumo)
			isRinshan = isRinshanChance;
		else
			isChankan = isRinshanChance;
		dict d = _saorirequest("MahjongUtil", "score", hai13, atariHai, bafuHai, jifuHai, strDora, isTsumo, nRichi, isIppatsu, isChankan, isRinshan, isFinalTileWin, is1stRound);
		if (d["head"] == "SAORI/1.0 400 Bad Request")
		{
			senderrorlog("warning", "failed \"score\" in \"showScoreResult\" with " + hai13 + " " + atariHai);
			return "\0Error.\e";
		}
		score = d["Result"];
		int isPureYakuman = 0;
		if ((score >= 32000 && !isOya || score >= 48000 && isOya) && (int)d["Value1"] < 13)
			isPureYakuman = 1;
		int nHan;
		int isDaisangen = 0;
		int isDaisushi = 0;
		if (isPureYakuman)
		{
			for (int i = 1; d["Value" + i] != nil; i++)
			{
				array a = _strsplit(d["Value" + i], ",");
				dYakuman += $(a[0], (int)a[1]);
				countYakuman++;
				if (a[0] == "大三元")
					isDaisangen = 1;
				else if (a[0] == "大四喜")
					isDaisushi = 1;
			}
		}
		else
		{
			nFu = d["Value0"];
			nHan = d["Value1"];
			for (int i = 2; d["Value" + i] != nil; i++)
			{
				array a = _strsplit(d["Value" + i], ",");
				dYakuAndHan += $(a[0], (int)a[1]);
			}
		}
		//パオ判定
		//先に晒した牌に暗槓がある場合もパオになるらしいが…レアケースのため未実装
		if (isDaisangen)
		{
			int countSangenpai = 0;
			for (int i = 0; arFuroHistory[nAgariPlayer][i] != nil; i++)
			{
				if (_strstr("5z6z7z", arFuroHistory[nAgariPlayer][i][0]) >= 0)
					countSangenpai++;
				if (countSangenpai == 3)
				{
					nPaoPlayerDaisangen = arFuroHistory[nAgariPlayer][i][1];
					break;
				}
			}
		}
		else if (isDaisushi)
		{
			int countFupai = 0;
			for (int i = 0; arFuroHistory[nAgariPlayer][i] != nil; i++)
			{
				if (_strstr("1z2z3z4z", arFuroHistory[nAgariPlayer][i][0]) >= 0)
					countFupai++;
				if (countFupai == 4)
				{
					nPaoPlayerDaisushi = arFuroHistory[nAgariPlayer][i][1];
					break;
				}
			}
		}
		array arYakuman = _dickeyget(dYakuman);
		if (modeEx)
			s += "\_l[,380]";
		for (int i = 0; arYakuman[i] != nil; i++)
		{
			if (modeEx)
				s += "\_l[300,]" + arYakuman[i] + "\_l[450,]役満\n";
			else
				s += arYakuman[i] + "\_l[100,]役満\n";
		}
		if (_aryvn(arYakuman) == 0)
		{
			array arYaku = _dickeyget(dYakuAndHan);
			for (int i = 0; arYaku[i] != nil; i++)
			{
				if (modeEx)
					s += "\_l[300,]" + _strreplace(arYaku[i], "ヤオ", "么") + "\_l[450,]" + dYakuAndHan[arYaku[i]] + "翻\n";
				else
					s += _strreplace(arYaku[i], "ヤオ", "么") + "\_l[100,]" + dYakuAndHan[arYaku[i]] + "翻\n";
			}
		}
		if (nHan > 0)
		{
			if (modeEx)
				s += "\_l[300,]" + nHan + "翻 " + nFu + "符\n";
			else
				s += "" + nHan + "翻 " + nFu + "符\n";
		}
		if (score > 0)
		{
			if (modeEx)
				s += "\_l[300,]" + score + "点\n";
			else
				s += "" + score + "点\n";
		}
		s += "\n";
	}
	//流し満貫
	else if (reason == "nagashimangan")
	{
		score = 8000;
		if (nAgariPlayer == oyaIndex)
			score = 12000;
		if (modeEx)
			s += "\_l[300,380]流し満貫\n";
		else
			s += "流し満貫\n";
	}
	//流局理由表示
	else if (reason != "")
	{
		dict d = ${
			$("kouhai", "荒牌平局"),
			$("touhai", "九種么九牌倒牌"),
			$("4renda", "四風子連打"),
			$("4kan", "四開槓"),
			$("4richi", "四家立直"),
			$("3ron", "三家和")
		};
		if (modeEx)
		{
			s += "\_l[,380]";
			s += "\_l[300,]" + d[reason] + "\n";
		}
		else
		{
			s += d[reason] + "\n";
		}
	}
	//プレイヤー持ち点表示
	int nKyotaku;
	if (nAgariPlayer >= 0)
	{
		nKyotaku = kyotaku;
		kyotaku = 0;
	}
	array arScoreAdd = {0, 0, 0, 0};
	if (nAgariPlayer >= 0 || reason == "kouhai")
		arScoreAdd = getScoreAddWithPao(nAgariPlayer, nFurikomiPlayer, score, tsumibou, nKyotaku, arTenpaiPlayerFlag, nPaoPlayerDaisangen, nPaoPlayerDaisushi, countYakuman, oyaIndex);
	if (modeEx)
		s += "\_l[,180]";
	for (int i = 0; playerName[i] != nil; i++)
	{
		arScore[i] += arScoreAdd[i];
		if (modeEx)
			s += "\_l[250,]<<" + playerName[i] + ">>\_l[400,]" + arScoreAdd[i] + "\_l[500,]" + arScore[i] + "\n";
		else
			s += "<<" + playerName[i] + ">>\_l[100,]" + arScoreAdd[i] + "\_l[160,]" + arScore[i] + "\n";
	}
	s += "\n";
	//牌表示
	if (nAgariPlayer >= 0 && reason == "")
	{
		s += "\f[height,+16]";
		s += showHai(hai13, atariHai, nAgariPlayer, 0, "", 1, 1);
		s += "\n\f[height,default]\n";
	}
	else if (modeEx)
	{
		for (int i = 0; i <= 3; i++)
		{
			if (arTenpaiPlayerFlag[i])
				s += showHai(arTehai[i], atariHai, i, -1, "", 1, 1);
		}
	}
	if (reason == "nagashimangan")
	{
		s += showKawa(-1, nAgariPlayer, -1);
	}
	if (!modeEx)
	{
		s += "\![*]\__q[Menu_StartKyoku]次へ\__q";
	}
	string si;
	string animNo;
	animNo = "5000001";
	si += "\![anim,offset," + animNo + ",0,0]";
	si += "\i[" + animNo + "]";
	arSavedTehai[3] += animNo;
	animNo = "5001999";
	si += "\![anim,offset," + animNo + ",0,0]";
	si += "\i[" + animNo + "]";
	arSavedTehai[3] += animNo;
	arSavedWordCommand += {"Menu_NextTurn"};
	s += si;
	reservedClickScript = "\![raise,OnChoiceSelect,Menu_StartKyoku]";
	//通知
	if (nAgariPlayer >= 0)
	{
		array a = {"agari", playerName[nAgariPlayer], nFu};
		array arYaku = _dickeyget(dYakuAndHan);
		for (int i = 0; arYaku[i] != nil; i++)
		{
			a += arYaku[i] + "," + dYakuAndHan[arYaku[i]];
		}
		s += notifyAll(a);
	}
	else
	{
		s += notifyAll({"ryukyoku"});
	}
	if (arRichiJunme[nAgariPlayer] >= 0)
	{
		for (int i = 0; arUradorahyouji[i] != nil; i++)
		{
			s += notifyAll({"dora", arUradorahyouji[i]});
		}
	}
	for (int i = 0; i < 4; i++)
	{
		string fugo = "";
		if (arScoreAdd[i] > 0)
			fugo = "+";
		else if (arScoreAdd[i] < 0)
			fugo = "-";
		if (fugo != "")
			s += notifyAll({"point", playerName[i], fugo, (int)_fabs(arScoreAdd[i])});
	}
	s += notifyAll({"kyokuend"});
	//連荘判定
	if (nAgariPlayer == oyaIndex)
	{
		tsumibou++;
	}
	else
	{
		if (nAgariPlayer >= 0)
			tsumibou = 0;
		else
			tsumibou++;
		if (!arTenpaiPlayerFlag[oyaIndex])
		{
			kyoku++;
			if (kyoku == 5)
			{
				kyoku = 1;
				bafu++;
			}
			oyaIndex = (oyaIndex + 1) % 4;
		}
	}
	//終了
	clearStatus();
	for (int i = 0; savedTehai[i] != nil; i++)
	{
		arSavedTehai[3] += savedTehai[i];
	}
	return s + siInfo + "\_q\e";
}

string getBafuHai()
{
	string bafuHai = "1z";
	if (bafu == 1)
		bafuHai = "2z";
	return bafuHai;
}

string getJifuHai(int nPlayer)
{
	array seki = {"1z", "2z", "3z", "4z"};
	dict dSeki;
	array pNames;
	for (int i = 0; playerName[i] != nil; i++)
	{
		pNames += playerName[(i + oyaIndex) % 4];
	}
	for (int i = 0; pNames[i] != nil; i++)
	{
		dSeki += $(pNames[i], seki[i]);
	}
	return dSeki[playerName[nPlayer]];
}

array getScoreAddWithPao(int nAgariPlayer, int nFurikomiPlayer, int score, int nTsumibou, int nKyotaku, array arTenpaiPlayerFlag, int nPaoPlayerDaisangen, int nPaoPlayerDaisushi, int countYakuman, int nOyaIndex)
{
	array arScoreAdd = {0, 0, 0, 0};
	int nPaoPlayer = -1;
	int paoScore = 0;
	if (nPaoPlayerDaisangen >= 0)
	{
		nPaoPlayer = nPaoPlayerDaisangen;
		paoScore = 32000;
	}
	else if (nPaoPlayerDaisushi >= 0)
	{
		nPaoPlayer = nPaoPlayerDaisushi;
		paoScore = 64000;
	}
	if (nAgariPlayer == nOyaIndex)
		paoScore = 1.5 * paoScore;
	if (nPaoPlayer >= 0)
	{
		array arScoreAdd1;
		array arScoreAdd2;
		if (nFurikomiPlayer >= 0)
		{
			arScoreAdd1 = getScoreAdd(nAgariPlayer, nFurikomiPlayer, score - (paoScore / 2), nTsumibou, nKyotaku, {});
			arScoreAdd2 = getScoreAdd(nAgariPlayer, nPaoPlayer, paoScore / 2, 0, 0, {});
		}
		else
		{
			if (countYakuman >= 2)
			{
				arScoreAdd1 = getScoreAdd(nAgariPlayer, -1, score - paoScore, nTsumibou, nKyotaku, {});
				arScoreAdd2 = getScoreAdd(nAgariPlayer, nPaoPlayer, paoScore, 0, 0, {});
			}
			else
			{
				arScoreAdd1 = getScoreAdd(nAgariPlayer, nPaoPlayer, score, nTsumibou, nKyotaku, {});
				arScoreAdd2 = {0, 0, 0, 0};
			}
		}
		for (int i = 0; i < 4; i++)
		{
			arScoreAdd[i] = arScoreAdd1[i] + arScoreAdd2[i];
		}
	}
	else
	{
		arScoreAdd = getScoreAdd(nAgariPlayer, nFurikomiPlayer, score, nTsumibou, nKyotaku, arTenpaiPlayerFlag);
	}
	return arScoreAdd;
}

array getScoreAdd(int nAgariPlayer, int nFurikomiPlayer, int score, int nTsumibou, int nKyotaku, array arTenpaiPlayerFlag)
{
	array arScoreAdd = {0, 0, 0, 0};
	if (_aryvn(arTenpaiPlayerFlag) == 0)
	{
		if (nFurikomiPlayer >= 0)
		{
			arScoreAdd[nFurikomiPlayer] = -1 * (score + (300 * nTsumibou));
			arScoreAdd[nAgariPlayer] = score + (300 * nTsumibou) + (1000 * nKyotaku);
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				if (nAgariPlayer == i)
				{
					if (nAgariPlayer == oyaIndex)
					{
						int nShou = (int)(score / 300) * 100;
						int nAmari = score % 300;
						int nScore = nShou;
						if (nAmari > 0)
							nScore += 100;
						nScore = 3 * nScore;
						arScoreAdd[i] = nScore + (300 * nTsumibou) + (1000 * nKyotaku);
					}
					else
					{
						int nShou1 = (int)(score / 200) * 100;
						int nAmari1 = score % 200;
						int nScore1 = nShou1;
						if (nAmari1 > 0)
							nScore1 += 100;
						int nShou2 = (int)(score / 400) * 100;
						int nAmari2 = score % 400;
						int nScore2 = nShou2;
						if (nAmari2 > 0)
							nScore2 += 100;
						int nScore = nScore1 + (2 * nScore2);
						arScoreAdd[i] = nScore + (300 * nTsumibou) + (1000 * nKyotaku);
					}
				}
				else
				{
					if (nAgariPlayer == oyaIndex)
					{
						int nShou = (int)(score / 300) * 100;
						int nAmari = score % 300;
						int nScore = nShou;
						if (nAmari > 0)
							nScore += 100;
						arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
					}
					else
					{
						if (i == oyaIndex)
						{
							int nShou = (int)(score / 200) * 100;
							int nAmari = score % 200;
							int nScore = nShou;
							if (nAmari > 0)
								nScore += 100;
							arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
						}
						else
						{
							int nShou = (int)(score / 400) * 100;
							int nAmari = score % 400;
							int nScore = nShou;
							if (nAmari > 0)
								nScore += 100;
							arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
						}
					}
				}
			}
		}
	}
	else
	{
		int nTenpai;
		for (int i = 0; arTenpaiPlayerFlag[i] != nil; i++)
		{
			nTenpai += arTenpaiPlayerFlag[i];
		}
		int plus;
		int minus;
		if (nTenpai == 0 || nTenpai == 4)
		{
			plus = 0;
			minus = 0;
		}
		else
		{
			plus = 3000 / nTenpai;
			minus = -3000 / (4 - nTenpai);
		}
		for (int i = 0; arTenpaiPlayerFlag[i] != nil; i++)
		{
			if (arTenpaiPlayerFlag[i])
				arScoreAdd[i] = plus;
			else
				arScoreAdd[i] = minus;
		}
	}
	return arScoreAdd;
}

string getDoraFromDorahyouji(string hai)
{
	dict d = ${
		$("1m", "2m"),
		$("2m", "3m"),
		$("3m", "4m"),
		$("4m", "5m"),
		$("5m", "6m"),
		$("6m", "7m"),
		$("7m", "8m"),
		$("8m", "9m"),
		$("9m", "1m"),
		$("1p", "2p"),
		$("2p", "3p"),
		$("3p", "4p"),
		$("4p", "5p"),
		$("5p", "6p"),
		$("6p", "7p"),
		$("7p", "8p"),
		$("8p", "9p"),
		$("9p", "1p"),
		$("1s", "2s"),
		$("2s", "3s"),
		$("3s", "4s"),
		$("4s", "5s"),
		$("5s", "6s"),
		$("6s", "7s"),
		$("7s", "8s"),
		$("8s", "9s"),
		$("9s", "1s"),
		$("1z", "2z"),
		$("2z", "3z"),
		$("3z", "4z"),
		$("4z", "1z"),
		$("5z", "6z"),
		$("6z", "7z"),
		$("7z", "5z")
	};
	return d[hai];
}
