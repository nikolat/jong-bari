//ロン
string Menu_Ron(dict ref)
{
	int nAgariPlayer = ref["Reference2"];
	int nFurikomiPlayer = ref["Reference3"];
	array hai13 = arTehai[nAgariPlayer];
	string sute = ref["Reference4"];
	return showScoreResult(nAgariPlayer, nFurikomiPlayer, hai13, sute, {});
}

//ツモ
string Menu_Tsumo(dict ref)
{
	int nAgariPlayer = ref["Reference2"];
	int nFurikomiPlayer = -1;
	array hai13 = arTehai[nAgariPlayer];
	string tsumo = arYama[nYamaIndex - 1];
	return showScoreResult(nAgariPlayer, nFurikomiPlayer, hai13, tsumo, {});
}

//流局
string OnRyukyokuScore(dict ref)
{
	array arTenpaiPlayerFlag = _strary(ref["Reference0"]);
	return showScoreResult(-1, -1, {}, "", arTenpaiPlayerFlag);
}

//点数画面表示
string showScoreResult(int nAgariPlayer, int nFurikomiPlayer, array hai13, string atariHai, array arTenpaiPlayerFlag)
{
	string s;
	s += "\![set,balloontimeout,0]\![set,choicetimeout,0]\0\s[0]\b[2]\_q";
	//王牌表示
	array wanpaiOmote = {"tb", "tb", "tb", "tb", dorahyouji, "tb", "tb"};
	array wanpaiUra = {"tb", "tb", "tb", "tb", uradorahyouji, "tb", "tb"};
	s += "\f[height,+16]\_l[110,]";
	for (int i = 0; wanpaiOmote[i] != nil; i++)
	{
		s += convertUnicode(wanpaiOmote[i]);
	}
	s += "\n\_l[110,]";
	for (int i = 0; wanpaiUra[i] != nil; i++)
	{
		s += convertUnicode(wanpaiUra[i]);
	}
	s += "\f[height,default]\n\n";
	s += "\_l[215,0] " + arBafu[bafu] + kyoku + "局";
	s += "\_l[260,0]●x" + tsumibou + "\n";
	s += "\_l[260,]\f[color,red]●\f[color,default]x" + kyotaku;
	s += "\_l[0,80]";
	//役・点数表示
	int score;
	int nFu;
	dict dYakuman;
	dict dYakuAndHan;
	if (nAgariPlayer > 0)
	{
		string bafuHai = getBafuHai();
		string jifuHai = getJifuHai(nAgariPlayer);
		int isRichi = 0;
		if (arRichiJunme[nAgariPlayer] >= 0)
			isRichi = 1;
		string strDora = getDoraFromDorahyouji(dorahyouji);
		if (isRichi)
			strDora += getDoraFromDorahyouji(uradorahyouji);
		int isTsumo = 0;
		if (nFurikomiPlayer == -1)
			isTsumo = 1;
		int isWRichi = 0;
		if (arRichiJunme[nAgariPlayer] == 0)
			isWRichi = 1;
		int isIppatsu = 0;
		if (isRichi && arRichiJunme[nAgariPlayer] == _aryvn(arKawa[nAgariPlayer]) - 1)//鳴きを考慮していないため注意
			isIppatsu = 1;
		int is1stRound = 0;
		if (_aryvn(arKawa[nAgariPlayer]) == 0)//鳴きを考慮していないため注意
			is1stRound = 1;
		int isFinalTileWin = 0;
		if (_aryvn(arYama) == nYamaIndex)
			isFinalTileWin = 1;
		int isOya = 0;
		if (nAgariPlayer == oyaIndex)
			isOya = 1;
		dict d = _saorirequest("MahjongUtil", "score", _arystr(hai13), atariHai, bafuHai, jifuHai, strDora, isTsumo, isRichi, isWRichi, isIppatsu, is1stRound, isFinalTileWin, isOya);
		score = d["Result"];
		int isYakuman = 0;
		if (score >= 32000 && !isOya || score >= 48000 && isOya)
			isYakuman = 1;
		int nHan;
		if (isYakuman)
		{
			for (int i = 1; d["Value" + i] != nil; i++)
			{
				array a = _strsplit(d["Value" + i], ",");
				dYakuman += $(a[0], (int)a[1]);
			}
		}
		else
		{
			nFu = d["Value0"];
			nHan = d["Value1"];
			for (int i = 2; d["Value" + i] != nil; i++)
			{
				array a = _strsplit(d["Value" + i], ",");
				dYakuAndHan += $(a[0], (int)a[1]);
			}
		}
		array arYakuman = _dickeyget(dYakuman);
		for (int i = 0; arYakuman[i] != nil; i++)
		{
			s += arYakuman[i] + "\_l[100,]役満\n";
		}
		if (_aryvn(arYakuman) == 0)
		{
			array arYaku = _dickeyget(dYakuAndHan);
			for (int i = 0; arYaku[i] != nil; i++)
			{
				s += _strreplace(arYaku[i], "ヤオ", "么") + "\_l[100,]" + dYakuAndHan[arYaku[i]] + "翻\n";
			}
		}
		if (nHan > 0)
		{
			s += "" + nHan + "翻 " + nFu + "符\n";
		}
		if (score > 0)
			s += "" + score + "点\n";
		s += "\n";
	}
	//プレイヤー持ち点表示
	int nKyotaku;
	if (nAgariPlayer >= 0)
	{
		nKyotaku = kyotaku;
		kyotaku = 0;
	}
	array arScoreAdd = getScoreAdd(nAgariPlayer, nFurikomiPlayer, score, tsumibou, nKyotaku, arTenpaiPlayerFlag);
	for (int i = 0; playerName[i] != nil; i++)
	{
		arScore[i] += arScoreAdd[i];
		s += "<<" + playerName[i] + ">>\_l[100,]" + arScoreAdd[i] + "\_l[160,]" + arScore[i] + "\n";
	}
	s += "\n";
	//牌表示
	s += "\f[height,+16]";
	for (int i = 0; hai13[i] != nil; i++)
	{
		s += convertUnicode(hai13[i]);
	}
	s += " " + convertUnicode(atariHai);
	s += "\n\f[height,default]\n";
	s += "\![*]\__q[Menu_StartKyoku]次へ\__q";
	s += " \![*]\__q[Menu_CANCEL]閉じる\__q";
	//通知
	if (nAgariPlayer >= 0)
	{
		s += "\![raiseother,__SYSTEM_ALL_GHOST__,OnMahjong," + getVersion()
			+ ",agari," + playerName[nAgariPlayer] + "," + nFu;
		array arYaku = _dickeyget(dYakuAndHan);
		for (int i = 0; arYaku[i] != nil; i++)
		{
			s += ",\"" + arYaku[i] + "," + dYakuAndHan[arYaku[i]] + "\"";
		}
		s += "]";
	}
	else
	{
		s += "\![raiseother,__SYSTEM_ALL_GHOST__,OnMahjong," + getVersion()
			+ ",ryukyoku]";
	}
	for (int i = 0; i < 3; i++)
	{
		string fugo = "";
		if (arScoreAdd[i] > 0)
			fugo = "+";
		else if (arScoreAdd[i] < 0)
			fugo = "-";
		if (fugo != "")
			s += "\![raiseother,__SYSTEM_ALL_GHOST__,OnMahjong," + getVersion()
				+ ",point," + playerName[i] + "," + fugo + "," + (int)_fabs(arScoreAdd[i]) + "]";
	}
	s += "\![raiseother,__SYSTEM_ALL_GHOST__,OnMahjong," + getVersion()
		+ ",kyokuend]";
	s += "\_q\e";
	//連荘判定
	if (nAgariPlayer == oyaIndex)
	{
		tsumibou++;
	}
	else
	{
		if (nAgariPlayer >= 0)
			tsumibou = 0;
		else
			tsumibou++;
		kyoku++;
		if (kyoku == 5)
		{
			kyoku = 1;
			bafu++;
		}
		oyaIndex++;
		if (oyaIndex == 4)
			oyaIndex = 0;
	}
	clearStatus();
	return s;
}

string getBafuHai()
{
	string bafuHai = "1z";
	if (bafu == 1)
		bafuHai = "2z";
	return bafuHai;
}

string getJifuHai(int nPlayer)
{
	array seki = {"1z", "2z", "3z", "4z"};
	dict dSeki;
	array pNames;
	for (int i = 0; playerName[i] != nil; i++)
	{
		pNames += playerName[(i + oyaIndex) % 4];
	}
	for (int i = 0; pNames[i] != nil; i++)
	{
		dSeki += $(pNames[i], seki[i]);
	}
	return dSeki[playerName[nPlayer]];
}

array getScoreAdd(int nAgariPlayer, int nFurikomiPlayer, int score, int nTsumibou, int nKyotaku, array arTenpaiPlayerFlag)
{
	array arScoreAdd = {0, 0, 0, 0};
	if (_aryvn(arTenpaiPlayerFlag) == 0)
	{
		if (nFurikomiPlayer >= 0)
		{
			arScoreAdd[nFurikomiPlayer] = -1 * (score + (300 * nTsumibou));
			arScoreAdd[nAgariPlayer] = score + (300 * nTsumibou) + (1000 * nKyotaku);
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				if (nAgariPlayer == i)
				{
					if (nAgariPlayer == oyaIndex)
					{
						int nShou = (int)(score / 300) * 100;
						int nAmari = score % 300;
						int nScore = nShou;
						if (nAmari > 0)
							nScore += 100;
						nScore = 3 * nScore;
						arScoreAdd[i] = nScore + (300 * nTsumibou) + (1000 * nKyotaku);
					}
					else
					{
						int nShou1 = (int)(score / 200) * 100;
						int nAmari1 = score % 200;
						int nScore1 = nShou1;
						if (nAmari1 > 0)
							nScore1 += 100;
						int nShou2 = (int)(score / 400) * 100;
						int nAmari2 = score % 400;
						int nScore2 = nShou2;
						if (nAmari2 > 0)
							nScore2 += 100;
						int nScore = nScore1 + (2 * nScore2);
						arScoreAdd[i] = nScore + (300 * nTsumibou) + (1000 * nKyotaku);
					}
				}
				else
				{
					if (nAgariPlayer == oyaIndex)
					{
						int nShou = (int)(score / 300) * 100;
						int nAmari = score % 300;
						int nScore = nShou;
						if (nAmari > 0)
							nScore += 100;
						arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
					}
					else
					{
						if (i == oyaIndex)
						{
							int nShou = (int)(score / 200) * 100;
							int nAmari = score % 200;
							int nScore = nShou;
							if (nAmari > 0)
								nScore += 100;
							arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
						}
						else
						{
							int nShou = (int)(score / 400) * 100;
							int nAmari = score % 400;
							int nScore = nShou;
							if (nAmari > 0)
								nScore += 100;
							arScoreAdd[i] = -1 * (nScore + (100 * nTsumibou));
						}
					}
				}
			}
		}
	}
	else
	{
		int nTenpai;
		for (int i = 0; arTenpaiPlayerFlag[i] != nil; i++)
		{
			nTenpai += arTenpaiPlayerFlag[i];
		}
		int plus;
		int minus;
		if (nTenpai == 0 || nTenpai == 4)
		{
			plus = 0;
			minus = 0;
		}
		else
		{
			plus = 3000 / nTenpai;
			minus = -3000 / (4 - nTenpai);
		}
		for (int i = 0; arTenpaiPlayerFlag[i] != nil; i++)
		{
			if (arTenpaiPlayerFlag[i])
				arScoreAdd[i] = plus;
			else
				arScoreAdd[i] = minus;
		}
	}
	return arScoreAdd;
}

dict getYakuInfo(int nAgariPlayer, int nFurikomiPlayer, array hai13, string atariHai, int nOyaPlayer, int nRichiJunme, array arKawaAgariPlayer, string bafuHai, string jifuHai, int isLastHai, int dora)
{
	array hai14 = hai13;
	hai14 += atariHai;
	hai14 = sortHai(hai14);
	int isTsumo = 0;
	if (nFurikomiPlayer == -1)
		isTsumo = 1;
	int isOya = 0;
	if (nAgariPlayer == nOyaPlayer)
		isOya = 1;
	int isRichi = 0;
	if (nRichiJunme >= 0)
		isRichi = 1;
	array a = getShantenNormalWithMentsu(hai14);
	int shantenNormal = a[0];
	array arMentsuAndTatsu = a[1];
	array arMentsuTemp = _strsplit(arMentsuAndTatsu[0], ",");//仮に最初の面子セットで役判定
	string atamaHai = strHaiToArray(arMentsuTemp[0])[0];
	array arMentsu;
	for (int i = 1; arMentsuTemp[i] != nil; i++)
	{
		arMentsu += strHaiToArray(arMentsuTemp[i]);
	}
	dict dHan;
	dict dYakuman;
	int nHan;
	int nYakuman;
	//役満判定
	if (_aryvn(arKawaAgariPlayer) == 0 && isTsumo && isOya)
	{
		dYakuman += $("天和", 1);
		nYakuman += 1;
	}
	if (_aryvn(arKawaAgariPlayer) == 0 && isTsumo && !isOya)//鳴きを考慮していないため注意
	{
		dYakuman += $("地和", 1);
		nYakuman += 1;
	}
	if (_aryvn(arKawaAgariPlayer) == 0 && !isTsumo)//鳴きを考慮していないため注意
	{
		dYakuman += $("人和", 1);
		nYakuman += 1;
	}
	if (isRyuiso(hai14))
	{
		dYakuman += $("緑一色", 1);
		nYakuman += 1;
	}
	if (isTsuiso(hai14))
	{
		dYakuman += $("字一色", 1);
		nYakuman += 1;
	}
	if (isDaisangen(hai14))
	{
		dYakuman += $("大三元", 1);
		nYakuman += 1;
	}
	if (isShousushi(hai14))
	{
		dYakuman += $("小四喜", 1);
		nYakuman += 1;
	}
	if (isDaisushi(hai14))
	{
		dYakuman += $("大四喜", 2);
		nYakuman += 2;
	}
	if (getShantenKokushi(hai14) == -1)
	{
		if (ASEARCH(atariHai, hai13) >= 0)
		{
			dYakuman += $("国士無双", 2);
			nYakuman += 2;
		}
		else
		{
			dYakuman += $("国士無双", 1);
			nYakuman += 1;
		}
	}
	if (isChuren(shantenNormal, hai14))
	{
		int n = _aryvn(ASEARCHEX(atariHai, hai13));
		if (n == 1 || n == 3)
		{
			dYakuman += $("九蓮宝燈", 2);
			nYakuman += 2;
		}
		else
		{
			dYakuman += $("九蓮宝燈", 1);
			nYakuman += 1;
		}
	}
	if (isChinroutou(shantenNormal, hai14))
	{
		dYakuman += $("清老頭", 1);
		nYakuman += 1;
	}
	//役判定
	if (isTsumo)//鳴き未実装のため決め打ち
	{
		dHan += $("門前清自摸和", 1);
		nHan += 1;
	}
	if (nRichiJunme > 0)
	{
		dHan += $("立直", 1);
		nHan += 1;
	}
	else if (nRichiJunme == 0)
	{
		dHan += $("W立直", 2);
		nHan += 2;
	}
	if (isRichi && nRichiJunme == _aryvn(arKawaAgariPlayer) - 1)//鳴きを考慮していないため注意
	{
		dHan += $("一発", 1);
		nHan += 1;
	}
	if (isTanyao(hai14))
	{
		dHan += $("断么九", 1);
		nHan += 1;
	}
	int nYakuhai = countYakuhai(hai14, bafuHai, jifuHai);
	if (nYakuhai >= 1)
	{
		dHan += $("役牌", nYakuhai);
		nHan += nYakuhai;
	}
	if (isLastHai && isTsumo)
	{
		dHan += $("海底撈月", 1);
		nHan += 1;
	}
	if (isLastHai && !isTsumo)
	{
		dHan += $("河底撈魚", 1);
		nHan += 1;
	}
	int nPeko = countPeko(arMentsu);
	if (nPeko != 2 && getShantenChitoitsu(hai14) == -1)
	{
		dHan += $("七対子", 2);
		nHan += 2;
	}
	if (isToitoi(arMentsu))
	{
		dHan += $("対々和", 2);
		nHan += 2;
	}
	int isHonrou = isHonroutou(hai14);
	if (isHonrou)
	{
		dHan += $("混老頭", 2);
		nHan += 2;
	}
	if (!isHonrou && isChanta(arMentsu, atamaHai))
	{
		dHan += $("混全帯么九", 2);
		nHan += 2;
	}
	if (isShousangen(hai14))
	{
		dHan += $("小三元", 2);
		nHan += 2;
	}
	if (isHonitsu(hai14))
	{
		dHan += $("混一色", 3);
		nHan += 3;
	}
	if (!isHonrou && isJunchan(arMentsu, atamaHai))
	{
		dHan += $("純全帯么九", 3);
		nHan += 3;
	}
	if (isChinitsu(hai14))
	{
		dHan += $("清一色", 6);
		nHan += 6;
	}
	if (dora > 0)
	{
		dHan += $("ドラ", dora);
		nHan += dora;
	}
	//面子の形によって変わる役の判定
	int nHanSubMax = -1;
	int nFuSubMax = -1;
	dict dYakumanSub;
	dict dHanSub;
	for (int i = 0; arMentsuAndTatsu[i] != nil; i++)
	{
		arMentsuTemp = _strsplit(arMentsuAndTatsu[i], ",");
		atamaHai = strHaiToArray(arMentsuTemp[0])[0];
		arMentsu = {};
		for (int j = 1; arMentsuTemp[j] != nil; j++)
		{
			arMentsu += strHaiToArray(arMentsuTemp[j]);
		}
		dict dSub = getYakuInfoSub(isTsumo, atariHai, bafuHai, jifuHai, atamaHai, arMentsu);
		int nHanSub = dSub["han"];
		int nFuSub = dSub["fu"];
		if (nHanSubMax < nHanSub)
		{
			nHanSubMax = nHanSub;
			nFuSubMax = nFuSub;
			dYakumanSub = dSub["dYakuman"];
			dHanSub = dSub["dHan"];
		}
		else if (nHanSubMax == nHanSub && nFuSubMax < nFuSub)
		{
			nFuSubMax = nFuSub;
		}
	}
	//役の合成
	array arKeyYakumanSub = _dickeyget(dYakumanSub);
	for (int i = 0; arKeyYakumanSub[i] != nil; i++)
	{
		dYakuman += $(arKeyYakumanSub[i], dYakumanSub[arKeyYakumanSub[i]]);
		nYakuman += dYakumanSub[arKeyYakumanSub[i]];
	}
	array arKeyHanSub = _dickeyget(dHanSub);
	for (int i = 0; arKeyHanSub[i] != nil; i++)
	{
		dHan += $(arKeyHanSub[i], dHanSub[arKeyHanSub[i]]);
		nHan += dHanSub[arKeyHanSub[i]];
	}

	int nFu;
	if (dHan["平和"] == 1 && dHan["門前清自摸和"] == 1)
		nFu = 20;
	else if (dHan["七対子"] == 2)
		nFu = 25;
	else if (dYakuman["国士無双"] == nil)
		nFu = nFuSubMax;
	int score = getScore(nYakuman, nHan, nFu, isOya);
	dict dRet = ${
		$("yakuman", dYakuman),
		$("han", dHan),
		$("fu", nFu),
		$("score", score)
	};	
	return dRet;
}

dict getYakuInfoSub(int isTsumo, string atariHai, string bafuHai, string jifuHai, string atamaHai, array arMentsu)
{
	dict dHan;
	dict dYakuman;
	int nHan;
	int nYakuman;
	//役満判定
	int nAnkou = countAnkou(arMentsu, isTsumo, atariHai, atamaHai);
	if (nAnkou == 4)
	{
		if (atariHai == atamaHai)
		{
			dYakuman += $("四暗刻", 2);
			nYakuman += 2;
		}
		else
		{
			dYakuman += $("四暗刻", 1);
			nYakuman += 1;
		}
	}
	//役判定
	if (isPinfu(atamaHai, arMentsu, atariHai, bafuHai, jifuHai))
	{
		dHan += $("平和", 1);
		nHan += 1;
	}
	int nPeko = countPeko(arMentsu);
	if (nPeko == 1)
	{
		dHan += $("一盃口", 1);
		nHan += 1;
	}
	if (nAnkou == 3)
	{
		dHan += $("三暗刻", 2);
		nHan += 2;
	}
	if (isSanshokudoukou(arMentsu))
	{
		dHan += $("三色同刻", 2);
		nHan += 2;
	}
	if (isSanshokudoujun(arMentsu))
	{
		dHan += $("三色同順", 2);
		nHan += 2;
	}
	if (isIkkitsuukan(arMentsu))
	{
		dHan += $("一気通貫", 2);
		nHan += 2;
	}
	if (nPeko == 2)
	{
		dHan += $("二盃口", 3);
		nHan += 3;
	}
	int nFu;
	if (dHan["平和"] == 1 && isTsumo)
		nFu = 20;
	else if (dHan["平和"] == 1 && !isTsumo)
		nFu = 30;
	else
		nFu = getFu(atamaHai, arMentsu, atariHai, bafuHai, jifuHai, isTsumo);
	dict dRet = ${
		$("dYakuman", dYakuman),
		$("dHan", dHan),
		$("han", nHan),
		$("fu", nFu)
	};	
	return dRet;
}

int getFu(string atamaHai, array arMentsu, string atariHai, string bafuHai, string jifuHai, int isTsumo)
{
	//(1)副底20符
	int nFu = 20;
	//(2)門前加符 or ツモ符
	if (isTsumo)
		nFu += 2;
	else
		nFu += 10;
	//(3)各面子
	string strYaochu = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (arMentsu[i][0] == arMentsu[i][1])
		{
			if (_strstr(strYaochu, arMentsu[i][0]) >= 0)
				nFu += 8;
			else
				nFu += 4;
		}
	}
	//(4)雀頭
	if (atamaHai == bafuHai)
		nFu += 2;
	if (atamaHai == jifuHai)
		nFu += 2;
	if (atamaHai == "5z" || atamaHai == "6z" || atamaHai == "7z")
		nFu += 2;
	//(5)待ち
	//待ちの形を再現する
	array arMachiTatsu;
	int nFu5;
	int nFu5add = -99;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (ASEARCH(atariHai, arMentsu[i]) >= 0)
			arMachiTatsu += convertNumArray(removeElementByName(arMentsu[i], atariHai, 1));
	}
	for (int i = 0; arMachiTatsu[i] != nil; i++)
	{
		if ((arMachiTatsu[i][0] != 1) && (arMachiTatsu[i][0] + 1 == arMachiTatsu[i][1]) && (arMachiTatsu[i][1] != 9))//両面待ち
		{
			nFu5 = 0;
			if (nFu5add < nFu5)
				nFu5add = nFu5;
		}
		else if (arMachiTatsu[i][0] == arMachiTatsu[i][1])//シャボ待ち
		{
			if (isTsumo)
			{
				nFu5 = 0;
				if (nFu5add < nFu5)
					nFu5add = nFu5;
			}
			else
			{
				if (_strstr(strYaochu, atariHai) >= 0)
				{
					nFu5 = -4;
					if (nFu5add < nFu5)
						nFu5add = nFu5;
				}
				else
				{
					nFu5 = -2;
					if (nFu5add < nFu5)
						nFu5add = nFu5;
				}
			}
		}
		else if (arMachiTatsu[i][0] == 1 && arMachiTatsu[i][1] == 2 || arMachiTatsu[i][0] == 8 && arMachiTatsu[i][1] == 9)//ペンチャン待ち
		{
			nFu5 = 2;
			if (nFu5add < nFu5)
				nFu5add = nFu5;
		}
		else if (arMachiTatsu[i][0] + 2 == arMachiTatsu[i][1])//カンチャン待ち
		{
			nFu5 = 2;
			if (nFu5add < nFu5)
				nFu5add = nFu5;
		}
	}
	if (_aryvn(arMachiTatsu) == 0 && atamaHai == atariHai)//単騎待ち
	{
		nFu5add = 2;
	}
	nFu += nFu5add;
	//切り上げ
	int nShou = nFu / 10;
	int nAmari = nFu % 10;
	if (nAmari > 0)
		nFu = 10 * nShou + 10;
	return nFu;
}

int getScore(int nYakuman, int nHan, int nFu, int isOya)
{
	int r;
	if (nYakuman > 0)
	{
		r = 32000 * nYakuman;
	}
	else
	{
		if (nHan >= 13)
			r = 32000;
		else if (nHan >= 11)
			r = 24000;
		else if (nHan >= 8)
			r = 16000;
		else if (nHan >= 6)
			r = 12000;
		else if (nHan >= 5)
			r = 8000;
		else
			return getScoreSub(nHan, nFu, isOya);
	}
	if (isOya)
		r = r * 1.5;
	return r;
}

int getScoreSub(int nHan, int nFu, int isOya)
{
	string key = "" + nFu + "-" + nHan;
	if (isOya)
	{
		dict dOya = ${
			$("20-1" , -1)  ,	$("20-2" , 2000) ,	$("20-3", 3900) ,	$("20-4", 7700) ,
			$("25-1" , -1)  ,	$("25-2" , 2400) ,	$("25-3", 4800) ,	$("25-4", 9600) ,
			$("30-1" , 1500),	$("30-2" , 2900) ,	$("30-3", 5800) ,	$("30-4", 11600),
			$("40-1" , 2000),	$("40-2" , 3900) ,	$("40-3", 7700) ,
			$("50-1" , 2400),	$("50-2" , 4800) ,	$("50-3", 9600) ,
			$("60-1" , 2900),	$("60-2" , 5800) ,	$("60-3", 11600),
			$("70-1" , 3400),	$("70-2" , 6800) ,
			$("80-1" , 3900),	$("80-2" , 7700) ,
			$("90-1" , 4400),	$("90-2" , 8700) ,
			$("100-1", 4800),	$("100-2", 9600) ,
			$("110-1", 5300),	$("110-2", 10600)
		};
		int score = dOya[key];
		if (score <= 0)
			score = 12000;
		return score;
	}
	else
	{
		dict dKo = ${
			$("20-1" , -1)  ,	$("20-2" , 1300),	$("20-3", 2600),	$("20-4", 5200),
			$("25-1" , -1)  ,	$("25-2" , 1600),	$("25-3", 3200),	$("25-4", 6400),
			$("30-1" , 1000),	$("30-2" , 2000),	$("30-3", 3900),	$("30-4", 7700),
			$("40-1" , 1300),	$("40-2" , 2600),	$("40-3", 5200),
			$("50-1" , 1600),	$("50-2" , 3200),	$("50-3", 6400),
			$("60-1" , 2000),	$("60-2" , 3900),	$("60-3", 7700),
			$("70-1" , 2300),	$("70-2" , 4500),
			$("80-1" , 2600),	$("80-2" , 5200),
			$("90-1" , 2900),	$("90-2" , 5800),
			$("100-1", 3200),	$("100-2", 6400),
			$("110-1", 3600),	$("110-2", 7100)
		};
		int score = dKo[key];
		if (score <= 0)
			score = 8000;
		return score;
	}
}

//槓ドラ未実装のため注意
array countDora(array hai, int isRichi)
{
	int n = 0;
	array a;
	a += getDoraFromDorahyouji(dorahyouji);
	if (isRichi)
		a += getDoraFromDorahyouji(uradorahyouji);
	for (int i = 0; a[i] != nil; i++)
	{
		for (int j = 0; hai[j] != nil; j++)
		{
			if (a[i] == hai[j])
				n++;
		}
	}
	return n;
}

string getDoraFromDorahyouji(string hai)
{
	dict d = ${
		$("1m", "2m"),
		$("2m", "3m"),
		$("3m", "4m"),
		$("4m", "5m"),
		$("5m", "6m"),
		$("6m", "7m"),
		$("7m", "8m"),
		$("8m", "9m"),
		$("9m", "1m"),
		$("1p", "2p"),
		$("2p", "3p"),
		$("3p", "4p"),
		$("4p", "5p"),
		$("5p", "6p"),
		$("6p", "7p"),
		$("7p", "8p"),
		$("8p", "9p"),
		$("9p", "1p"),
		$("1s", "2s"),
		$("2s", "3s"),
		$("3s", "4s"),
		$("4s", "5s"),
		$("5s", "6s"),
		$("6s", "7s"),
		$("7s", "8s"),
		$("8s", "9s"),
		$("9s", "1s"),
		$("1z", "2z"),
		$("2z", "3z"),
		$("3z", "4z"),
		$("4z", "1z"),
		$("5z", "6z"),
		$("6z", "7z"),
		$("7z", "5z")
	};
	return d[hai];
}

//断么九判定
int isTanyao(array hai14)
{
	string strYaochuhai = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (_strstr(strYaochuhai, hai14[i]) >= 0)
			return 0; 
	}
	return 1;
}

//平和判定
int isPinfu(string atamaHai, array arMentsu, string atariHai, string bafuHai, string jifuHai)
{
	//一般手の和了でない
	if (atamaHai == "")
		return 0;
	//雀頭は役牌以外でないといけない
	if (atamaHai == bafuHai || atamaHai == jifuHai || atamaHai == "5z" || atamaHai == "6z" || atamaHai == "7z")
		return 0;
	//待ちの形を再現する
	array arMachiTatsu;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		//面子はすべて順子でなければならない
		if (arMentsu[i][0] == arMentsu[i][1])
			return 0;
		if (ASEARCH(atariHai, arMentsu[i]) >= 0)
			arMachiTatsu += convertNumArray(removeElementByName(arMentsu[i], atariHai, 1));
	}
	for (int i = 0; arMachiTatsu[i] != nil; i++)
	{
		if ((arMachiTatsu[i][0] != 1) && (arMachiTatsu[i][0] + 1 == arMachiTatsu[i][1]) && (arMachiTatsu[i][1] != 9))//両面待ち
			return 1;
	}
	return 0;
}

int countPeko(array arMentsu)
{
	int nPeko = 0;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		array arPrev = arMentsu[i];
		for (int j = i + 1; arMentsu[j] != nil; j++)
		{
			array arNext = arMentsu[j];
			if (arPrev[0] == arNext[0] && arPrev[1] == arNext[1] && arPrev[2] == arNext[2])
				nPeko++;
		}
	}
	return nPeko;
}

int countYakuhai(array hai14, string bafuHai, string jifuHai)
{
	int nYakuhai;
	if (_aryvn(ASEARCHEX(bafuHai, hai14)) == 3)
		nYakuhai++;
	if (_aryvn(ASEARCHEX(jifuHai, hai14)) == 3)
		nYakuhai++;
	if (_aryvn(ASEARCHEX("5z", hai14)) == 3)
		nYakuhai++;
	if (_aryvn(ASEARCHEX("6z", hai14)) == 3)
		nYakuhai++;
	if (_aryvn(ASEARCHEX("7z", hai14)) == 3)
		nYakuhai++;
	return nYakuhai;
}

//対々和判定
int isToitoi(array arMentsu)
{
	if (_aryvn(arMentsu) < 4)
		return 0;
	//すべて刻子
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (!(arMentsu[i][0] == arMentsu[i][1] && arMentsu[i][0] == arMentsu[i][2]))
			return 0;
	}
	return 1;
}

int countAnkou(array arMentsu, int isTsumo, string atariHai, string atamaHai)
{
	//暗刻をカウント
	int nAnkou;
	int isNotAnkou = 1;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (arMentsu[i][0] == arMentsu[i][1] && arMentsu[i][0] == arMentsu[i][2])
		{
			nAnkou++;
		}
		else
		{
			if (ASEARCH(atariHai, arMentsu[i]) >= 0)
				isNotAnkou = 0;//順子に当たり牌が含まれている
		}
	}
	//雀頭に当たり牌が含まれている
	if (atamaHai == atariHai)
		isNotAnkou = 0;
	//自摸なら常に暗刻
	if (isTsumo)
		isNotAnkou = 0;	
	if (isNotAnkou)
		nAnkou--;
	return nAnkou;
}

//三色同刻判定
int isSanshokudoukou(array arMentsu)
{
	array arKotsuNumber;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (arMentsu[i][0] == arMentsu[i][1] && arMentsu[i][0] == arMentsu[i][2])
		{
			int n = _substr(arMentsu[i][0], 0, 1);
			string color = _substr(arMentsu[i][0], 1, 1);
			if (color != "z")
				arKotsuNumber += n;
		}
	}
	if (_aryvn(arKotsuNumber) < 3)
		return 0;
	for (int i = 0; arKotsuNumber[i + 2] != nil; i++)
	{
		if (_aryvn(ASEARCHEX(arKotsuNumber[i], arKotsuNumber)) == 3)
			return 1;
	}
	return 0;
}

//三色同順判定
int isSanshokudoujun(array arMentsu)
{
	array arShuntsuStr;
	array arShuntsuNumber;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (arMentsu[i][0] != arMentsu[i][1])
		{
			int n = _substr(arMentsu[i][0], 0, 1);
			if (ASEARCH(arMentsu[i][0], arShuntsuStr) == -1)
			{
				arShuntsuStr += arMentsu[i][0];
				arShuntsuNumber += n;
			}
		}
	}
	if (_aryvn(arShuntsuNumber) < 3)
		return 0;
	for (int i = 0; arShuntsuNumber[i + 2] != nil; i++)
	{
		if (_aryvn(ASEARCHEX(arShuntsuNumber[i], arShuntsuNumber)) == 3)
			return 1;
	}
	return 0;
}

//混老頭判定
int isHonroutou(array hai14)
{
	string strYaochuhai = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (_strstr(strYaochuhai, hai14[i]) == -1)
			return 0; 
	}
	return 1;
}

//一気通貫判定
int isIkkitsuukan(array arMentsu)
{
	array arShuntsuStr;
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		if (arMentsu[i][0] != arMentsu[i][1])
		{
			int n = _substr(arMentsu[i][0], 0, 1);
			if (ASEARCH(arMentsu[i][0], arShuntsuStr) == -1 && (n == 1 || n == 4 || n == 7))
			{
				arShuntsuStr += arMentsu[i][0];
			}
		}
	}
	if (_aryvn(arShuntsuStr) < 3)
		return 0;
	if (ASEARCH("1m", arShuntsuStr) >= 0 && ASEARCH("4m", arShuntsuStr) >= 0 && ASEARCH("7m", arShuntsuStr) >= 0)
		return 1;
	if (ASEARCH("1p", arShuntsuStr) >= 0 && ASEARCH("4p", arShuntsuStr) >= 0 && ASEARCH("7p", arShuntsuStr) >= 0)
		return 1;
	if (ASEARCH("1s", arShuntsuStr) >= 0 && ASEARCH("4s", arShuntsuStr) >= 0 && ASEARCH("7s", arShuntsuStr) >= 0)
		return 1;
	return 0;
}

int subChanta(array arMentsu, string atamaHai)
{
	if (_aryvn(arMentsu) < 4)
		return 0;
	string strYaochuhai = "1m9m1p9p1s9s1z2z3z4z5z6z7z";
	string strJihai = "1z2z3z4z5z6z7z";
	int hasJihai = 0;
	if (_strstr(strYaochuhai, atamaHai) >= 0)
	{
		if (_strstr(strJihai, atamaHai) >= 0)
			hasJihai = 1;
	}
	else
	{
		return 0;
	}
	for (int i = 0; arMentsu[i] != nil; i++)
	{
		int hasYaochu = 0;
		for (int j = 0; arMentsu[i][j] != nil; j++)
		{
			if (_strstr(strYaochuhai, arMentsu[i][j]) >= 0)
			{
				if (_strstr(strJihai, arMentsu[i][j]) >= 0)
					hasJihai = 1;
				hasYaochu = 1;
				break;
			}
		}
		if (!hasYaochu)
			return 0;
	}
	if (hasJihai)
		return 1;//混全帯么九
	else
		return 2;//純全帯么九
}

//混全帯么九判定
int isChanta(array arMentsu, string atamaHai)
{
	int r = subChanta(arMentsu, atamaHai);
	if (r == 1)
		return 1;
	return 0;
}

//純全帯么九判定
int isJunchan(array arMentsu, string atamaHai)
{
	int r = subChanta(arMentsu, atamaHai);
	if (r == 2)
		return 1;
	return 0;
}

//小三元判定
int isShousangen(array hai14)
{
	int nSangenpai;
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (hai14[i] == "5z" || hai14[i] == "6z" || hai14[i] == "7z")
			nSangenpai++;
	}
	if (nSangenpai == 8)
		return 1;
	return 0;
}

//大三元判定
int isDaisangen(array hai14)
{
	int nSangenpai;
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (hai14[i] == "5z" || hai14[i] == "6z" || hai14[i] == "7z")
			nSangenpai++;
	}
	if (nSangenpai == 9)
		return 1;
	return 0;
}

array getUsedHaiGroup(array hai)
{
	array a = {0, 0, 0, 0};
	for (int i = 0; hai[i] != nil; i++)
	{
		switch (_substr(hai[i], 1, 1))
		{
		case "m":
			a[0] = 1;
			break;
		case "p":
			a[1] = 1;
			break;
		case "s":
			a[2] = 1;
			break;
		case "z":
			a[3] = 1;
			break;
		default:
			break;
		}
	}
	return a;
}

//混一色判定
int isHonitsu(array hai14)
{
	array a = getUsedHaiGroup(hai14);
	if (a[0] && a[1] || a[1] && a[2] || a[2] && a[0] || !a[3])
		return 0;
	return 1;
}

//清一色判定
int isChinitsu(array hai14)
{
	array a = getUsedHaiGroup(hai14);
	if (a[0] && a[1] || a[1] && a[2] || a[2] && a[0] || a[3])
		return 0;
	return 1;
}

//字一色判定
int isTsuiso(array hai14)
{
	array a = getUsedHaiGroup(hai14);
	if (!a[0] && !a[1] && !a[2])
		return 1;
	return 0;
}

//緑一色判定
int isRyuiso(array hai14)
{
	string strGreenhai = "2s3s4s6s8s6z";
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (_strstr(strGreenhai, hai14[i]) == -1)
			return 0; 
	}
	return 1;
}

//小四喜判定
int isShousushi(array hai14)
{
	int nFupai;
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (hai14[i] == "1z" || hai14[i] == "2z" || hai14[i] == "3z" || hai14[i] == "4z")
			nFupai++;
	}
	if (nFupai == 11)
		return 1;
	return 0;
}

//大四喜判定
int isDaisushi(array hai14)
{
	int nFupai;
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (hai14[i] == "1z" || hai14[i] == "2z" || hai14[i] == "3z" || hai14[i] == "4z")
			nFupai++;
	}
	if (nFupai == 12)
		return 1;
	return 0;
}

//九蓮宝燈判定
int isChuren(int shantenNormal, array hai14)
{
	//一般手の和了でない
	if (shantenNormal != -1)
		return 0;
	//清一色でない
	if (!isChinitsu(hai14))
		return 0;
	array arHai = convertNumArray(hai14);
	string strHai = _arystr(arHai);
	array arChuren = {
		"11112345678999",
		"11122345678999",
		"11123345678999",
		"11123445678999",
		"11123455678999",
		"11123456678999",
		"11123456778999",
		"11123456788999",
		"11123456789999"
	};
	if (ASEARCH(strHai, arChuren) >= 0)
		return 1;
	return 0;
}

//清老頭判定
int isChinroutou(int shantenNormal, array hai14)
{
	//一般手の和了でない
	if (shantenNormal != -1)
		return 0;
	string strRoutouhai = "1m9m1p9p1s9s";
	for (int i = 0; hai14[i] != nil; i++)
	{
		if (_strstr(strRoutouhai, hai14[i]) == -1)
			return 0; 
	}
	return 1;
}
